/* Maxima batch file for solving circuit transfer function from matrix representation  */
/* in symbolic form using Cramer's rule. The numerator and denominator expressions are */
/* evaluated separately as polynomial coefficients in powers of complex variable s.    */
/* Jarmo L. 14.9.2018 */

/* This variation of a James/Baxandall two-band shelving tone stack offers:   */
/*  - active circuitry (opamp w/ negative feedback)                           */
/*  - one capacitor in the bass control                                       */
/*  - one capacitor in the treble control                                     */
/* Charles Day 5.5.2021 */

stardisp: true$           /* multiplication is displayed with an asterisk between operands */
ratmx: true$              /* matrix operations  are performed in CRE */
/* matrix obtained from node analysis of the circuit */
matrix(
    [1/RIN+1/RT1+1/R1,    -1/R1      ,       0        ,       0       ,     -1/RT1     ,   0   ],
    [     -1/R1      ,1/R1+1/RB1+s*CB,     -1/RB1     ,     -s*CB     ,        0       ,   0   ],
    [       0        ,    -1/RB1     ,1/RB1+1/RB2+1/R3,     -1/RB2    ,        0       ,   0   ],
    [       0        ,    -s*CB      ,     -1/RB2     ,1/RB2+1/R2+s*CB,        0       , -1/R2 ],
    [     -1/RT1     ,       0       ,       0        ,       0       ,1/RT1+1/RT2+s*CT, -1/RT2],
    [       0        ,       0       ,     -1/R3      ,       0       ,      -s*CT     ,   0   ]
)$
determinant(%)$           /* evaluates the determinant of the previous output % */
DEN_fs: factor(%)$        /* expands the result and factors to common denominator, save to variable DEN_fs */
DEN_den: denom(DEN_fs)$   /* saves a variable DEN_den for denominator expression */ 
pld: num(DEN_fs)$         /* saves a variable pld for numerator expression */
/* extract denominator coefficients in the powers of s to designated variables */
DEN_XRe: coeff(pld,s,4);
DEN_AIm: coeff(pld,s,3);
DEN_BRe: coeff(pld,s,2);
DEN_CIm: coeff(pld,s,1);
DEN_DRe: coeff(pld,s,0);

/* matrix to solve Vout/Vin using Cramer's rule */
matrix(
    [     -1/R1      ,1/R1+1/RB1+s*CB,     -1/RB1     ,     -s*CB     ,        0       ],
    [       0        ,    -1/RB1     ,1/RB1+1/RB2+1/R3,     -1/RB2    ,        0       ],
    [       0        ,    -s*CB      ,     -1/RB2     ,1/RB2+1/R2+s*CB,        0       ],
    [     -1/RT1     ,       0       ,       0        ,       0       ,1/RT1+1/RT2+s*CT],
    [       0        ,       0       ,     -1/R3      ,       0       ,      -s*CT     ]
)$
M1_6: determinant(%)$
NUM_fs: factor(%)$
NUM_den: denom(NUM_fs)$
/* expand to common denominator for numerator and denominator in Cramer's division */
pln: expand((-1/RIN)*num(NUM_fs)*DEN_den/NUM_den)$
/* extract numerator coefficients in the powers of s to designated variables */
NUM_XRe: coeff(pln,s,4);
NUM_AIm: coeff(pln,s,3);
NUM_BRe: coeff(pln,s,2);
NUM_CIm: coeff(pln,s,1);
NUM_DRe: coeff(pln,s,0);
DEN_den;
NUM_den;
DEN_den/NUM_den;
