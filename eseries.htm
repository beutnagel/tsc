<!DOCTYPE html>
<HTML>
<HEAD>
<TITLE>TSC in the web</TITLE>
<LINK href="nouislider.css" rel="stylesheet"/>
<SCRIPT type="text/javascript" src="nouislider.min.js"></SCRIPT>
<LINK href="dygraph.css" rel="stylesheet"/>
<LINK href="tsc.css" rel="stylesheet"/>
<LINK href="https://fonts.googleapis.com/css?family=Barlow+Condensed|Raleway|Material+Icons" rel="stylesheet">
<SCRIPT type="text/javascript" src="dygraph.min.js"></SCRIPT>
<SCRIPT type="text/javascript" src="tsc_common.js"></SCRIPT>
</HEAD>
<BODY>
<FORM name="frm" onsubmit="applyValues(); return false;">
  <TABLE align="center">
    <TR>
      <TD colspan="3" align="left" class="navbar">
        <DIV id="linkDiv" style="float: left;" class="navbar-stack"></DIV>
        <DIV id="infoDiv" style="float: right;" class="navbar-info"><a href="info.htm" class="navbar-menu-item">INFO</a></DIV>
      </TD>
    </TR>
    <TR>
      <TD align="center" valign="top" width="400" class="tonestack-image">
        <IMG src="eseries2_pic.png"></IMG>
      </TD>
      <TD align="right" valign="top" width="180" class="tonestack-values">
        <table class="tonestack-values-table">
          <thead>
            <tr>
              <th class="tonestack-value-th-part">Part</th>
              <th class="tonestack-value-th-value">Value</th>
              <th class="tonestack-value-th-unit"></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="tonestack-value-label">RIN</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RIN" id="id_RIN" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">R2</td>
              <td class="tonestack-value-value"><INPUT type="text" name="R2" id="id_R2" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">R3</td>
              <td class="tonestack-value-value"><INPUT type="text" name="R3" id="id_R3" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">RB</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RB" id="id_RB" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">R5</td>
              <td class="tonestack-value-value"><INPUT type="text" name="R5" id="id_R5" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">RT</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RT" id="id_RT" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">C1</td>
              <td class="tonestack-value-value"><INPUT type="text" name="C1" id="id_C1" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">C2</td>
              <td class="tonestack-value-value"><INPUT type="text" name="C2" id="id_C2" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">C3</td>
              <td class="tonestack-value-value"><INPUT type="text" name="C3" id="id_C3" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">C4</td>
              <td class="tonestack-value-value"><INPUT type="text" name="C4" id="id_C4" size="7" readonly="readonly" style="text-align: right" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
          </tbody>
        </table>
        <CENTER>
          <INPUT type="button" name="edit" value="Edit" title="Edit values" id="id_edit" onclick="editValues();" class="tonestack-values-button">
          <INPUT type="button" name="apply" value="Apply" title="Apply values" id="id_apply" onclick="applyValues();" class="tonestack-values-button">
          <INPUT type="button" name="defaults" value="Default" title="Set default values" id="id_defaults" onclick="setDefaultValues(); applyValues();" class="tonestack-values-button">
        </CENTER>
      </TD>
      <TD rowspan="2" align="center" valign="top" width="700" class="tonestack-graph">
        <div id="buttonContainer" style="overflow: hidden; width: 100%;">
          <div style="float: left; padding-left: 4px;">
            Amplitude<input type="checkbox" name="graphToggle" onclick="updateURL(); swapGraphs();" class="toggle">Phase
          </div>
          <input type="button" name="Clear" value="Clear snapshots" id="id_clear" onclick="clearSnapshots();" class="tonestack-values-button" style="float: right;">
          <input type="button" name="Snapshot" value="Take snapshot" id="id_snapshot" onclick="addSeries();" class="tonestack-values-button" style="float: right;">
          <input type="button" name="Sweep" value="Sweep" id="id_sweep" onclick="sweepValues();" class="tonestack-values-button" style="float: right;">
        </div>
        <div id="graphContainer" class="tonestack-graph-container">
          <div id="graph" style="height: 480px; width: 640px;"></div>
          <div id="graph2" style="height: 480px; width: 640px; display:none;"></div>
          <div id="legendDiv" class="tonestack-graph-value"></div>
        </div>
      </TD>
    </TR>
    <TR>
      <TD colspan="2" class="tonestack-sliders">
        <BR>
        <SPAN id="label_RB" class="tonestack-slider-label">RB <select id="id_RB_pot" name="RB_pot" class="tonestack-select-pot" onchange="updateURL(); doCalc()">
          <option value="Linear">Linear</option>
          <option value="LogA" selected="selected">LogA</option>
          <option value="LogB">LogB</option></select>
        </SPAN>
        <DIV id="range_RB" class="tonestack-slider-input"></DIV>
        <SPAN id="value_RB" class="tonestack-slider-value"></SPAN><BR><BR><BR><BR>
        <SPAN id="label_RT" class="tonestack-slider-label">RT <select id="id_RT_pot" name="RT_pot" class="tonestack-select-pot" onchange="updateURL(); doCalc()">
          <option value="Linear">Linear</option>
          <option value="LogA" selected="selected">LogA</option>
          <option value="LogB">LogB</option></select>
        </SPAN>
        <DIV id="range_RT" class="tonestack-slider-input"></DIV>
        <SPAN id="value_RT" class="tonestack-slider-value"></SPAN><BR><BR><BR><BR>
      </TD>
    </TR>
  </TABLE>

<SCRIPT>
    // create links to all the tone stack pages to the top of the page
    createLinks("linkDiv","Fender","E-series");

    // component variables for calculation
    var RTreble;
    var RBass;
    var RIN;
    var R2;
    var R3;
    var R5;
    var C1;
    var C2;
    var C3;
    var C4;

    // create sliders and save the div-element of the slider
    var range_RB = createSlider('range_RB','value_RB');
    var range_RT = createSlider('range_RT','value_RT');

    // data for frequency points is created here and saved to array X
    var X = createFrequencies(90,10,100000,1);

    // Graph objects
    var graph1 = new tscGraph(X, "frequency [Hz]", "amplitude [dB]", "E-series");
    var graph2 = new tscGraph(X, "frequency [Hz]", "phase", "E-series", 0, "graph2");
    currentGraph = graph1;

    // Set default part values, plus any customizations
    setDefaultValues();
    setCustomValues();

    // Apply part values and display settings
    applyValues();
    if (document.frm.graphToggle.checked) {
        swapGraphs();
    }

    // start listening the onSlide event from the slider and run the analysis function
    range_RB.noUiSlider.on('slide', doCalc);
    range_RT.noUiSlider.on('slide', doCalc);

    // function applies values given from ui and evaluates the frequency response
    function applyValues() {
        RIN     = parseInt(document.frm.RIN.value);
        R2      = parseInt(document.frm.R2.value);
        RBass   = parseInt(document.frm.RB.value);
        R3      = parseInt(document.frm.R3.value);
        R5      = parseInt(document.frm.R5.value);
        RTreble = parseInt(document.frm.RT.value);
        C1     = (1e-12)*parseInt(document.frm.C1.value);
        C2     = (1e-12)*parseInt(document.frm.C2.value);
        C3     = (1e-12)*parseInt(document.frm.C3.value);
        C4     = (1e-12)*parseInt(document.frm.C4.value);

        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].setAttribute('readonly', 'readonly');
                inputElements[i].style.backgroundColor = "#EBEBE4";
            }
        }
        updateURL();
        doCalc();
    }

    // function releases the readonly component value fields for editing
    function editValues() {
        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].removeAttribute('readonly');
                inputElements[i].style.backgroundColor = "#FFFFFF";
            }
        }
    }

    // function sets default values to component value fields
    function setDefaultValues() {
        document.frm.RIN.value = 1300;
        document.frm.R2.value  = 220000;
        document.frm.RB.value  = 1000000;
        document.frm.R3.value  = 100000;
        document.frm.R5.value  = 220000;
        document.frm.RT.value  = 1000000;
        document.frm.C1.value  = 10000;
        document.frm.C2.value  = 250;
        document.frm.C3.value  = 100000;
        document.frm.C4.value  = 5000;
        document.frm.RB_pot.value = "LogA";
        document.frm.RT_pot.value = "LogA";
    }


    function sweepValues() {
        for (p = 0; p <= 10; p += 5) {
            range_RB.noUiSlider.set(p);
            for (q = 0; q <=10; q += 5) {
                range_RT.noUiSlider.set(q);
                addSeries();
            }
        }
    }

    // This function is called with every change of the slider.
    // It does the hard math and evaluates the filter transfer function
    // for the given frequency range and updates values to the graph.
    function doCalc() {

        // pot rotation 0 - 10 from the slider component
        var RotTreble = getRotationForPotType(range_RT.noUiSlider.get(), document.frm.RT_pot.value);
        var RotBass   = getRotationForPotType(range_RB.noUiSlider.get(), document.frm.RB_pot.value);

        // Calculated part values
        var RB1  = Math.round( RBass*(1.0*RotBass/10.0) );
        var RB2  = Math.round( RBass*(1.0 - 1.0*RotBass/10.0) );
        var RT2  = Math.round( RTreble*(1.0*RotTreble/10.0) );
        var RT1  = Math.round( RTreble*(1.0 - 1.0*RotTreble/10.0) );


        // Transfer function denominator coefficients

var DEN_XRe = RB1*RB2*RIN*RT1*RT2*C1*C2*C3*C4 + R3*RB2*RIN*RT1*RT2*C1*C2*C3*C4
 + R2*RB2*RIN*RT1*RT2*C1*C2*C3*C4 + R3*RB1*RIN*RT1*RT2*C1*C2*C3*C4
 + R2*RB1*RIN*RT1*RT2*C1*C2*C3*C4 + R2*RB1*RB2*RT1*RT2*C1*C2*C3*C4
 + R2*R3*RB2*RT1*RT2*C1*C2*C3*C4 + R2*R3*RB1*RT1*RT2*C1*C2*C3*C4
 + R5*RB1*RB2*RIN*RT2*C1*C2*C3*C4 + R3*RB1*RB2*RIN*RT2*C1*C2*C3*C4
 + R3*R5*RB2*RIN*RT2*C1*C2*C3*C4 + R2*R5*RB2*RIN*RT2*C1*C2*C3*C4
 + R2*R3*RB2*RIN*RT2*C1*C2*C3*C4 + R3*R5*RB1*RIN*RT2*C1*C2*C3*C4
 + R2*R5*RB1*RIN*RT2*C1*C2*C3*C4 + R2*R3*RB1*RIN*RT2*C1*C2*C3*C4
 + R2*R5*RB1*RB2*RT2*C1*C2*C3*C4 + R2*R3*RB1*RB2*RT2*C1*C2*C3*C4
 + R2*R3*R5*RB2*RT2*C1*C2*C3*C4 + R2*R3*R5*RB1*RT2*C1*C2*C3*C4
 + R5*RB1*RB2*RIN*RT1*C1*C2*C3*C4 + R3*RB1*RB2*RIN*RT1*C1*C2*C3*C4
 + R2*RB1*RB2*RIN*RT1*C1*C2*C3*C4 + R3*R5*RB2*RIN*RT1*C1*C2*C3*C4
 + R2*R5*RB2*RIN*RT1*C1*C2*C3*C4 + R3*R5*RB1*RIN*RT1*C1*C2*C3*C4
 + R2*R5*RB1*RIN*RT1*C1*C2*C3*C4 + R2*R5*RB1*RB2*RT1*C1*C2*C3*C4
 + R2*R3*RB1*RB2*RT1*C1*C2*C3*C4 + R2*R3*R5*RB2*RT1*C1*C2*C3*C4
 + R2*R3*R5*RB1*RT1*C1*C2*C3*C4 + R2*R5*RB1*RB2*RIN*C1*C2*C3*C4
 + R2*R3*RB1*RB2*RIN*C1*C2*C3*C4 + R2*R3*R5*RB2*RIN*C1*C2*C3*C4
 + R2*R3*R5*RB1*RIN*C1*C2*C3*C4;

var DEN_AIm = RB1*RIN*RT1*RT2*C1*C2*C3 + R3*RIN*RT1*RT2*C1*C2*C3
 + R2*RIN*RT1*RT2*C1*C2*C3 + R2*RB1*RT1*RT2*C1*C2*C3
 + R2*R3*RT1*RT2*C1*C2*C3 + R5*RB1*RIN*RT2*C1*C2*C3
 + R3*RB1*RIN*RT2*C1*C2*C3 + R3*R5*RIN*RT2*C1*C2*C3
 + R2*R5*RIN*RT2*C1*C2*C3 + R2*R3*RIN*RT2*C1*C2*C3
 + R2*R5*RB1*RT2*C1*C2*C3 + R2*R3*RB1*RT2*C1*C2*C3
 + R2*R3*R5*RT2*C1*C2*C3 + R5*RB1*RIN*RT1*C1*C2*C3
 + R3*RB1*RIN*RT1*C1*C2*C3 + R2*RB1*RIN*RT1*C1*C2*C3
 + R3*R5*RIN*RT1*C1*C2*C3 + R2*R5*RIN*RT1*C1*C2*C3
 + R2*R5*RB1*RT1*C1*C2*C3 + R2*R3*RB1*RT1*C1*C2*C3
 + R2*R3*R5*RT1*C1*C2*C3 + R2*R5*RB1*RIN*C1*C2*C3
 + R2*R3*RB1*RIN*C1*C2*C3 + R2*R3*R5*RIN*C1*C2*C3
 + RB1*RB2*RT1*RT2*C1*C2*C4 + R3*RB2*RT1*RT2*C1*C2*C4
 + R2*RB2*RT1*RT2*C1*C2*C4 + R3*RB1*RT1*RT2*C1*C2*C4
 + R2*RB1*RT1*RT2*C1*C2*C4 + RB1*RB2*RIN*RT2*C1*C2*C4
 + R3*RB2*RIN*RT2*C1*C2*C4 + R2*RB2*RIN*RT2*C1*C2*C4
 + R3*RB1*RIN*RT2*C1*C2*C4 + R2*RB1*RIN*RT2*C1*C2*C4
 + R5*RB1*RB2*RT2*C1*C2*C4 + R3*RB1*RB2*RT2*C1*C2*C4
 + R2*RB1*RB2*RT2*C1*C2*C4 + R3*R5*RB2*RT2*C1*C2*C4
 + R2*R5*RB2*RT2*C1*C2*C4 + R3*R5*RB1*RT2*C1*C2*C4
 + R2*R5*RB1*RT2*C1*C2*C4 + R5*RB1*RB2*RT1*C1*C2*C4
 + R3*RB1*RB2*RT1*C1*C2*C4 + R2*RB1*RB2*RT1*C1*C2*C4
 + R3*R5*RB2*RT1*C1*C2*C4 + R2*R5*RB2*RT1*C1*C2*C4
 + R3*R5*RB1*RT1*C1*C2*C4 + R2*R5*RB1*RT1*C1*C2*C4
 + R5*RB1*RB2*RIN*C1*C2*C4 + R3*RB1*RB2*RIN*C1*C2*C4
 + R2*RB1*RB2*RIN*C1*C2*C4 + R3*R5*RB2*RIN*C1*C2*C4
 + R2*R5*RB2*RIN*C1*C2*C4 + R3*R5*RB1*RIN*C1*C2*C4
 + R2*R5*RB1*RIN*C1*C2*C4 + RB1*RB2*RIN*RT1*C2*C3*C4
 + R3*RB2*RIN*RT1*C2*C3*C4 + R2*RB2*RIN*RT1*C2*C3*C4
 + R3*RB1*RIN*RT1*C2*C3*C4 + R2*RB1*RIN*RT1*C2*C3*C4
 + R2*RB1*RB2*RT1*C2*C3*C4 + R2*R3*RB2*RT1*C2*C3*C4
 + R2*R3*RB1*RT1*C2*C3*C4 + R5*RB1*RB2*RIN*C2*C3*C4
 + R3*RB1*RB2*RIN*C2*C3*C4 + R3*R5*RB2*RIN*C2*C3*C4
 + R2*R5*RB2*RIN*C2*C3*C4 + R2*R3*RB2*RIN*C2*C3*C4
 + R3*R5*RB1*RIN*C2*C3*C4 + R2*R5*RB1*RIN*C2*C3*C4
 + R2*R3*RB1*RIN*C2*C3*C4 + R2*R5*RB1*RB2*C2*C3*C4
 + R2*R3*RB1*RB2*C2*C3*C4 + R2*R3*R5*RB2*C2*C3*C4
 + R2*R3*R5*RB1*C2*C3*C4 + RB1*RB2*RIN*RT2*C1*C3*C4
 + R3*RB2*RIN*RT2*C1*C3*C4 + R2*RB2*RIN*RT2*C1*C3*C4
 + R3*RB1*RIN*RT2*C1*C3*C4 + R2*RB1*RIN*RT2*C1*C3*C4
 + R2*RB1*RB2*RT2*C1*C3*C4 + R2*R3*RB2*RT2*C1*C3*C4
 + R2*R3*RB1*RT2*C1*C3*C4 + R5*RB1*RB2*RIN*C1*C3*C4
 + R3*RB1*RB2*RIN*C1*C3*C4 + R2*RB1*RB2*RIN*C1*C3*C4
 + R3*R5*RB2*RIN*C1*C3*C4 + R2*R5*RB2*RIN*C1*C3*C4
 + R3*R5*RB1*RIN*C1*C3*C4 + R2*R5*RB1*RIN*C1*C3*C4
 + R2*R5*RB1*RB2*C1*C3*C4 + R2*R3*RB1*RB2*C1*C3*C4
 + R2*R3*R5*RB2*C1*C3*C4 + R2*R3*R5*RB1*C1*C3*C4;

var DEN_BRe = RB1*RIN*RT1*C2*C3
 + R3*RIN*RT1*C2*C3 + R2*RIN*RT1*C2*C3 + R2*RB1*RT1*C2*C3
 + R2*R3*RT1*C2*C3 + R5*RB1*RIN*C2*C3 + R3*RB1*RIN*C2*C3
 + R3*R5*RIN*C2*C3 + R2*R5*RIN*C2*C3 + R2*R3*RIN*C2*C3
 + R2*R5*RB1*C2*C3 + R2*R3*RB1*C2*C3 + R2*R3*R5*C2*C3
 + RB1*RIN*RT2*C1*C3 + R3*RIN*RT2*C1*C3 + R2*RIN*RT2*C1*C3
 + R2*RB1*RT2*C1*C3 + R2*R3*RT2*C1*C3 + R5*RB1*RIN*C1*C3
 + R3*RB1*RIN*C1*C3 + R2*RB1*RIN*C1*C3 + R3*R5*RIN*C1*C3
 + R2*R5*RIN*C1*C3 + R2*R5*RB1*C1*C3 + R2*R3*RB1*C1*C3 + R2*R3*R5*C1*C3
 + RB1*RT1*RT2*C1*C2 + R3*RT1*RT2*C1*C2 + R2*RT1*RT2*C1*C2
 + RB1*RIN*RT2*C1*C2 + R3*RIN*RT2*C1*C2 + R2*RIN*RT2*C1*C2
 + R5*RB1*RT2*C1*C2 + R3*RB1*RT2*C1*C2 + R2*RB1*RT2*C1*C2
 + R3*R5*RT2*C1*C2 + R2*R5*RT2*C1*C2 + R5*RB1*RT1*C1*C2
 + R3*RB1*RT1*C1*C2 + R2*RB1*RT1*C1*C2 + R3*R5*RT1*C1*C2
 + R2*R5*RT1*C1*C2 + R5*RB1*RIN*C1*C2 + R3*RB1*RIN*C1*C2
 + R2*RB1*RIN*C1*C2 + R3*R5*RIN*C1*C2 + R2*R5*RIN*C1*C2
 + RB1*RB2*RT1*C2*C4 + R3*RB2*RT1*C2*C4
 + R2*RB2*RT1*C2*C4 + R3*RB1*RT1*C2*C4 + R2*RB1*RT1*C2*C4
 + RB1*RB2*RIN*C2*C4 + R3*RB2*RIN*C2*C4 + R2*RB2*RIN*C2*C4
 + R3*RB1*RIN*C2*C4 + R2*RB1*RIN*C2*C4 + R5*RB1*RB2*C2*C4
 + R3*RB1*RB2*C2*C4 + R2*RB1*RB2*C2*C4 + R3*R5*RB2*C2*C4
 + R2*R5*RB2*C2*C4 + R3*R5*RB1*C2*C4 + R2*R5*RB1*C2*C4
 + RB1*RB2*RT2*C1*C4 + R3*RB2*RT2*C1*C4 + R2*RB2*RT2*C1*C4
 + R3*RB1*RT2*C1*C4 + R2*RB1*RT2*C1*C4 + R5*RB1*RB2*C1*C4
 + R3*RB1*RB2*C1*C4 + R2*RB1*RB2*C1*C4 + R3*R5*RB2*C1*C4
 + R2*R5*RB2*C1*C4 + R3*R5*RB1*C1*C4 + R2*R5*RB1*C1*C4
 + R3*RB2*RIN*C3*C4 + R2*RB2*RIN*C3*C4 + R3*RB1*RIN*C3*C4
 + R2*RB1*RIN*C3*C4 + R2*RB1*RB2*C3*C4 + R2*R3*RB2*C3*C4
 + R2*R3*RB1*C3*C4 + RB1*RB2*RIN*C3*C4;

var DEN_CIm = RB1*RT1*C2 + R3*RT1*C2 + R2*RT1*C2 + RB1*RIN*C2 + R3*RIN*C2 + R2*RIN*C2 + R5*RB1*C2
 + R3*RB1*C2 + R2*RB1*C2 + R3*R5*C2 + R2*R5*C2 + RB1*RT2*C1 + R3*RT2*C1 + R2*RT2*C1 + R5*RB1*C1 + R3*RB1*C1 + R2*RB1*C1 + R3*R5*C1 + R2*R5*C1
 + RB1*RIN*C3 + R3*RIN*C3 + R2*RIN*C3 + R2*RB1*C3 + R2*R3*C3 + RB1*RB2*C4 + R3*RB2*C4 + R2*RB2*C4 + R3*RB1*C4 + R2*RB1*C4;

var DEN_DRe =  RB1 + R3 + R2;


// Transfer function numerator multipliers for current I5
var NOM_XRe = C1*C2*C3*C4*R2*RB1*RB2*RT1*RT2 + C1*C2*C3*C4*R2*R5*RB1*RB2*RT2
 + C1*C2*C3*C4*R2*R3*RB1*RB2*RT2 + C1*C2*C3*C4*R2*R3*R5*RB2*RT2
 + C1*C2*C3*C4*R2*R3*R5*RB1*RT2;

var NOM_AIm = C1*C2*C3*R2*RB1*RT1*RT2 + C1*C2*C4*R5*RB1*RB2*RT2
 + C1*C2*C4*R3*RB1*RB2*RT2 + C1*C3*C4*R2*RB1*RB2*RT2 + C1*C2*C4*R2*RB1*RB2*RT2
 + C1*C2*C4*R3*R5*RB2*RT2 + C1*C2*C4*R2*R5*RB2*RT2 + C1*C2*C4*R3*R5*RB1*RT2
 + C1*C2*C4*R2*R5*RB1*RT2 + C1*C2*C3*R2*R5*RB1*RT2 + C1*C2*C3*R2*R3*RB1*RT2
 + C1*C2*C3*R2*R3*R5*RT2 + C2*C3*C4*R2*RB1*RB2*RT1 + C2*C3*C4*R2*R5*RB1*RB2
 + C2*C3*C4*R2*R3*RB1*RB2 + C2*C3*C4*R2*R3*R5*RB2 + C2*C3*C4*R2*R3*R5*RB1;

var NOM_BRe = C1*C2*R5*RB1*RT2 + C1*C2*R3*RB1*RT2 + C1*C3*R2*RB1*RT2
 + C1*C2*R2*RB1*RT2 + C1*C2*R3*R5*RT2 + C1*C2*R2*R5*RT2 + C2*C3*R2*RB1*RT1
 + C2*C4*R5*RB1*RB2 + C2*C4*R3*RB1*RB2 + C3*C4*R2*RB1*RB2 + C2*C4*R2*RB1*RB2
 + C2*C4*R3*R5*RB2 + C2*C4*R2*R5*RB2 + C2*C4*R3*R5*RB1 + C2*C4*R2*R5*RB1
 + C2*C3*R2*R5*RB1 + C2*C3*R2*R3*RB1 + C2*C3*R2*R3*R5;

var NOM_CIm = C2*R5*RB1 + C2*R3*RB1 + C3*R2*RB1 + C2*R2*RB1 + C2*R3*R5 + C2*R2*R5;

var NOM_DRe = 0;


        // Calculate magnitude and phase at each frequency
        doCalcBode(
            [ NOM_DRe, NOM_CIm, NOM_BRe, NOM_AIm, NOM_XRe ],
            [ DEN_DRe, DEN_CIm, DEN_BRe, DEN_AIm, DEN_XRe ]
        );
        currentGraph.update();
    }
</SCRIPT>
</FORM>
</BODY>
</HTML>
