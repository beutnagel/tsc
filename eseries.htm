<!DOCTYPE html>
<HTML>
<HEAD>
<TITLE>TSC in the web</TITLE>
<LINK href="nouislider.min.css" rel="stylesheet"/>
<SCRIPT type="text/javascript" src="nouislider.min.js"></SCRIPT>
<LINK href="dygraph.css" rel="stylesheet"/>
<SCRIPT type="text/javascript" src="dygraph.min.js"></SCRIPT>
<SCRIPT type="text/javascript" src="tsc_common.js"></SCRIPT>

<STYLE>
#range_RB,
#range_RT {
    width: 300px;
    margin: 0 auto 0px;
    display: inline-block;
}
#value_RB,
#value_RT {
    width: 70px;
    display: inline-block;
    text-align: center;
    margin: 0;
}
#label_RB,
#label_RT {
    width: 150px;
    display: inline-block;
    text-align: center;
    margin: 0;
}
</STYLE>

</HEAD>
<BODY>
<FORM name="frm">
  <TABLE border="1" align="center">
    <TR>
      <TD colspan="3" align="left">
        <DIV id="linkDiv" style="float: left;"></DIV>
        <DIV id="infoDiv" style="float: right;">[<a href="info.htm">INFO</a>]</DIV>
      </TD>
    </TR>
    <TR>
      <TD align="center" valign="top" width="400">
        <IMG src="eseries2_pic.png"></IMG>
      </TD>
      <TD align="right" valign="top" width="180">
        <SMALL>
        RIN: <INPUT type="text" name="RIN" id="id_RIN" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        R2: <INPUT type="text" name="R2" id="id_R2" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        R3: <INPUT type="text" name="R3" id="id_R3" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        RB: <INPUT type="text" name="RB" id="id_RB" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        R5: <INPUT type="text" name="R5" id="id_R5" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        RT: <INPUT type="text" name="RT" id="id_RT" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        C1: <INPUT type="text" name="C1" id="id_C1" size="7" readonly="readonly" style="text-align: right"> pF<BR>
        C2: <INPUT type="text" name="C2" id="id_C2" size="7" readonly="readonly" style="text-align: right"> pF<BR>
        C3: <INPUT type="text" name="C3" id="id_C3" size="7" readonly="readonly" style="text-align: right"> pF<BR>
        C4: <INPUT type="text" name="C4" id="id_C4" size="7" readonly="readonly" style="text-align: right"> pF<BR><BR>
        </SMALL>
        <CENTER>
        <INPUT type="button" name="edit" value="Edit values" id="id_edit" onclick="editValues();"><BR>
        <INPUT type="button" name="apply" value="Apply values" id="id_apply" onclick="applyValues();"><BR>
        <INPUT type="button" name="defaults" value="Set default values" id="id_defaults" onclick="setDefaultValues();"><BR>
        </CENTER>
      </TD>  
      <TD rowspan="2" align="center" valign="top" width="700">
        <DIV id="legendDiv" style="float: right;"></DIV>
        <DIV id="graph" style="height: 480px; width: 640px;"></DIV>
      </TD>
    </TR>
    <TR>
      <TD colspan="2">
        <BR>
        <SPAN id="label_RB">RB (LogA)</SPAN>
        <DIV id="range_RB"></DIV>
        <SPAN id="value_RB"></SPAN><BR><BR><BR><BR>
        <SPAN id="label_RT">RT (LogA)</SPAN>
        <DIV id="range_RT"></DIV>
        <SPAN id="value_RT"></SPAN><BR><BR><BR><BR>
      </TD>
    </TR>
  </TABLE>

<SCRIPT>
    // create links to all the tone stack pages to the top of the page 
    createLinks("linkDiv","E-series");

    // component variables for calculation
    var RTreble;
    var RBass;
    var RIN;
    var R2;
    var R3;
    var R5;
    var C1;
    var C2;
    var C3;
    var C4;

    // create sliders and save the div-element of the slider
    var range_RB = createSlider('range_RB','value_RB');
    var range_RT = createSlider('range_RT','value_RT');

    // variable g will hold the graph object for synchronized updates
    var g = null;

    // data for frequency points is created here and saved to array X
    X = createFrequencies(90,10,100000,1);

    // set the default values to the component variables and input fields
    setDefaultValues();

    // start listening the onSlide event from the slider and run the analysis function
    range_RB.noUiSlider.on('slide', doCalc);
    range_RT.noUiSlider.on('slide', doCalc);

    // function applies values given from ui and evaluates the frequency response
    function applyValues() {
        RIN     = parseInt(document.frm.RIN.value);
        R2      = parseInt(document.frm.R2.value);
        RBass   = parseInt(document.frm.RB.value);
        R3      = parseInt(document.frm.R3.value);
        R5      = parseInt(document.frm.R5.value);
        RTreble = parseInt(document.frm.RT.value);
        C1     = (1e-12)*parseInt(document.frm.C1.value);
        C2     = (1e-12)*parseInt(document.frm.C2.value);
        C3     = (1e-12)*parseInt(document.frm.C3.value);
        C4     = (1e-12)*parseInt(document.frm.C4.value);

        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].setAttribute('readonly', 'readonly');
                inputElements[i].style.backgroundColor = "#EBEBE4";
            }
        }
        doCalc();
    }

    // function releases the readonly component value fields for editing
    function editValues() {
        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].removeAttribute('readonly');
                inputElements[i].style.backgroundColor = "#FFFFFF";
            }
        }
    }

    // function sets default values to component value fields
    function setDefaultValues() {
        document.frm.RIN.value = 1300;
        document.frm.R2.value  = 220000;
        document.frm.RB.value  = 1000000;
        document.frm.R3.value  = 100000;
        document.frm.R5.value  = 220000;
        document.frm.RT.value  = 1000000;
        document.frm.C1.value  = 10000;
        document.frm.C2.value  = 250;
        document.frm.C3.value  = 100000;
        document.frm.C4.value  = 5000;
        
        applyValues();
    }

    // This function is called with every change of the slider.
    // It does the hard math and evaluates the filter transfer function
    // for the given frequency range and updates values to the graph.
    function doCalc() {
        var row = [];
        var data = [];

        // pot rotation 0 - 10 from the slider component
        var RotTreble = logAPotModel(range_RT.noUiSlider.get());
        var RotBass   = logAPotModel(range_RB.noUiSlider.get());

        var RB1  = Math.round( RBass*(1.0*RotBass/10.0) );
        var RB2  = Math.round( RBass*(1.0 - 1.0*RotBass/10.0) );
        var RT2  = Math.round( RTreble*(1.0*RotTreble/10.0) );
        var RT1  = Math.round( RTreble*(1.0 - 1.0*RotTreble/10.0) );


var DEN_XRe = RB1*RB2*RIN*RT1*RT2*C1*C2*C3*C4 + R3*RB2*RIN*RT1*RT2*C1*C2*C3*C4
 + R2*RB2*RIN*RT1*RT2*C1*C2*C3*C4 + R3*RB1*RIN*RT1*RT2*C1*C2*C3*C4
 + R2*RB1*RIN*RT1*RT2*C1*C2*C3*C4 + R2*RB1*RB2*RT1*RT2*C1*C2*C3*C4
 + R2*R3*RB2*RT1*RT2*C1*C2*C3*C4 + R2*R3*RB1*RT1*RT2*C1*C2*C3*C4
 + R5*RB1*RB2*RIN*RT2*C1*C2*C3*C4 + R3*RB1*RB2*RIN*RT2*C1*C2*C3*C4
 + R3*R5*RB2*RIN*RT2*C1*C2*C3*C4 + R2*R5*RB2*RIN*RT2*C1*C2*C3*C4
 + R2*R3*RB2*RIN*RT2*C1*C2*C3*C4 + R3*R5*RB1*RIN*RT2*C1*C2*C3*C4
 + R2*R5*RB1*RIN*RT2*C1*C2*C3*C4 + R2*R3*RB1*RIN*RT2*C1*C2*C3*C4
 + R2*R5*RB1*RB2*RT2*C1*C2*C3*C4 + R2*R3*RB1*RB2*RT2*C1*C2*C3*C4
 + R2*R3*R5*RB2*RT2*C1*C2*C3*C4 + R2*R3*R5*RB1*RT2*C1*C2*C3*C4
 + R5*RB1*RB2*RIN*RT1*C1*C2*C3*C4 + R3*RB1*RB2*RIN*RT1*C1*C2*C3*C4
 + R2*RB1*RB2*RIN*RT1*C1*C2*C3*C4 + R3*R5*RB2*RIN*RT1*C1*C2*C3*C4
 + R2*R5*RB2*RIN*RT1*C1*C2*C3*C4 + R3*R5*RB1*RIN*RT1*C1*C2*C3*C4
 + R2*R5*RB1*RIN*RT1*C1*C2*C3*C4 + R2*R5*RB1*RB2*RT1*C1*C2*C3*C4
 + R2*R3*RB1*RB2*RT1*C1*C2*C3*C4 + R2*R3*R5*RB2*RT1*C1*C2*C3*C4
 + R2*R3*R5*RB1*RT1*C1*C2*C3*C4 + R2*R5*RB1*RB2*RIN*C1*C2*C3*C4
 + R2*R3*RB1*RB2*RIN*C1*C2*C3*C4 + R2*R3*R5*RB2*RIN*C1*C2*C3*C4
 + R2*R3*R5*RB1*RIN*C1*C2*C3*C4;

var DEN_AIm = RB1*RIN*RT1*RT2*C1*C2*C3 + R3*RIN*RT1*RT2*C1*C2*C3
 + R2*RIN*RT1*RT2*C1*C2*C3 + R2*RB1*RT1*RT2*C1*C2*C3
 + R2*R3*RT1*RT2*C1*C2*C3 + R5*RB1*RIN*RT2*C1*C2*C3
 + R3*RB1*RIN*RT2*C1*C2*C3 + R3*R5*RIN*RT2*C1*C2*C3
 + R2*R5*RIN*RT2*C1*C2*C3 + R2*R3*RIN*RT2*C1*C2*C3
 + R2*R5*RB1*RT2*C1*C2*C3 + R2*R3*RB1*RT2*C1*C2*C3
 + R2*R3*R5*RT2*C1*C2*C3 + R5*RB1*RIN*RT1*C1*C2*C3
 + R3*RB1*RIN*RT1*C1*C2*C3 + R2*RB1*RIN*RT1*C1*C2*C3
 + R3*R5*RIN*RT1*C1*C2*C3 + R2*R5*RIN*RT1*C1*C2*C3
 + R2*R5*RB1*RT1*C1*C2*C3 + R2*R3*RB1*RT1*C1*C2*C3
 + R2*R3*R5*RT1*C1*C2*C3 + R2*R5*RB1*RIN*C1*C2*C3
 + R2*R3*RB1*RIN*C1*C2*C3 + R2*R3*R5*RIN*C1*C2*C3
 + RB1*RB2*RT1*RT2*C1*C2*C4 + R3*RB2*RT1*RT2*C1*C2*C4
 + R2*RB2*RT1*RT2*C1*C2*C4 + R3*RB1*RT1*RT2*C1*C2*C4
 + R2*RB1*RT1*RT2*C1*C2*C4 + RB1*RB2*RIN*RT2*C1*C2*C4
 + R3*RB2*RIN*RT2*C1*C2*C4 + R2*RB2*RIN*RT2*C1*C2*C4
 + R3*RB1*RIN*RT2*C1*C2*C4 + R2*RB1*RIN*RT2*C1*C2*C4
 + R5*RB1*RB2*RT2*C1*C2*C4 + R3*RB1*RB2*RT2*C1*C2*C4
 + R2*RB1*RB2*RT2*C1*C2*C4 + R3*R5*RB2*RT2*C1*C2*C4
 + R2*R5*RB2*RT2*C1*C2*C4 + R3*R5*RB1*RT2*C1*C2*C4
 + R2*R5*RB1*RT2*C1*C2*C4 + R5*RB1*RB2*RT1*C1*C2*C4
 + R3*RB1*RB2*RT1*C1*C2*C4 + R2*RB1*RB2*RT1*C1*C2*C4
 + R3*R5*RB2*RT1*C1*C2*C4 + R2*R5*RB2*RT1*C1*C2*C4
 + R3*R5*RB1*RT1*C1*C2*C4 + R2*R5*RB1*RT1*C1*C2*C4
 + R5*RB1*RB2*RIN*C1*C2*C4 + R3*RB1*RB2*RIN*C1*C2*C4
 + R2*RB1*RB2*RIN*C1*C2*C4 + R3*R5*RB2*RIN*C1*C2*C4
 + R2*R5*RB2*RIN*C1*C2*C4 + R3*R5*RB1*RIN*C1*C2*C4
 + R2*R5*RB1*RIN*C1*C2*C4 + RB1*RB2*RIN*RT1*C2*C3*C4
 + R3*RB2*RIN*RT1*C2*C3*C4 + R2*RB2*RIN*RT1*C2*C3*C4
 + R3*RB1*RIN*RT1*C2*C3*C4 + R2*RB1*RIN*RT1*C2*C3*C4
 + R2*RB1*RB2*RT1*C2*C3*C4 + R2*R3*RB2*RT1*C2*C3*C4
 + R2*R3*RB1*RT1*C2*C3*C4 + R5*RB1*RB2*RIN*C2*C3*C4
 + R3*RB1*RB2*RIN*C2*C3*C4 + R3*R5*RB2*RIN*C2*C3*C4
 + R2*R5*RB2*RIN*C2*C3*C4 + R2*R3*RB2*RIN*C2*C3*C4
 + R3*R5*RB1*RIN*C2*C3*C4 + R2*R5*RB1*RIN*C2*C3*C4
 + R2*R3*RB1*RIN*C2*C3*C4 + R2*R5*RB1*RB2*C2*C3*C4
 + R2*R3*RB1*RB2*C2*C3*C4 + R2*R3*R5*RB2*C2*C3*C4
 + R2*R3*R5*RB1*C2*C3*C4 + RB1*RB2*RIN*RT2*C1*C3*C4
 + R3*RB2*RIN*RT2*C1*C3*C4 + R2*RB2*RIN*RT2*C1*C3*C4
 + R3*RB1*RIN*RT2*C1*C3*C4 + R2*RB1*RIN*RT2*C1*C3*C4
 + R2*RB1*RB2*RT2*C1*C3*C4 + R2*R3*RB2*RT2*C1*C3*C4
 + R2*R3*RB1*RT2*C1*C3*C4 + R5*RB1*RB2*RIN*C1*C3*C4
 + R3*RB1*RB2*RIN*C1*C3*C4 + R2*RB1*RB2*RIN*C1*C3*C4
 + R3*R5*RB2*RIN*C1*C3*C4 + R2*R5*RB2*RIN*C1*C3*C4
 + R3*R5*RB1*RIN*C1*C3*C4 + R2*R5*RB1*RIN*C1*C3*C4
 + R2*R5*RB1*RB2*C1*C3*C4 + R2*R3*RB1*RB2*C1*C3*C4
 + R2*R3*R5*RB2*C1*C3*C4 + R2*R3*R5*RB1*C1*C3*C4;


var DEN_BRe = RB1*RIN*RT1*C2*C3
 + R3*RIN*RT1*C2*C3 + R2*RIN*RT1*C2*C3 + R2*RB1*RT1*C2*C3
 + R2*R3*RT1*C2*C3 + R5*RB1*RIN*C2*C3 + R3*RB1*RIN*C2*C3
 + R3*R5*RIN*C2*C3 + R2*R5*RIN*C2*C3 + R2*R3*RIN*C2*C3
 + R2*R5*RB1*C2*C3 + R2*R3*RB1*C2*C3 + R2*R3*R5*C2*C3
 + RB1*RIN*RT2*C1*C3 + R3*RIN*RT2*C1*C3 + R2*RIN*RT2*C1*C3
 + R2*RB1*RT2*C1*C3 + R2*R3*RT2*C1*C3 + R5*RB1*RIN*C1*C3
 + R3*RB1*RIN*C1*C3 + R2*RB1*RIN*C1*C3 + R3*R5*RIN*C1*C3
 + R2*R5*RIN*C1*C3 + R2*R5*RB1*C1*C3 + R2*R3*RB1*C1*C3 + R2*R3*R5*C1*C3
 + RB1*RT1*RT2*C1*C2 + R3*RT1*RT2*C1*C2 + R2*RT1*RT2*C1*C2
 + RB1*RIN*RT2*C1*C2 + R3*RIN*RT2*C1*C2 + R2*RIN*RT2*C1*C2
 + R5*RB1*RT2*C1*C2 + R3*RB1*RT2*C1*C2 + R2*RB1*RT2*C1*C2
 + R3*R5*RT2*C1*C2 + R2*R5*RT2*C1*C2 + R5*RB1*RT1*C1*C2
 + R3*RB1*RT1*C1*C2 + R2*RB1*RT1*C1*C2 + R3*R5*RT1*C1*C2
 + R2*R5*RT1*C1*C2 + R5*RB1*RIN*C1*C2 + R3*RB1*RIN*C1*C2
 + R2*RB1*RIN*C1*C2 + R3*R5*RIN*C1*C2 + R2*R5*RIN*C1*C2
 + RB1*RB2*RT1*C2*C4 + R3*RB2*RT1*C2*C4
 + R2*RB2*RT1*C2*C4 + R3*RB1*RT1*C2*C4 + R2*RB1*RT1*C2*C4
 + RB1*RB2*RIN*C2*C4 + R3*RB2*RIN*C2*C4 + R2*RB2*RIN*C2*C4
 + R3*RB1*RIN*C2*C4 + R2*RB1*RIN*C2*C4 + R5*RB1*RB2*C2*C4
 + R3*RB1*RB2*C2*C4 + R2*RB1*RB2*C2*C4 + R3*R5*RB2*C2*C4
 + R2*R5*RB2*C2*C4 + R3*R5*RB1*C2*C4 + R2*R5*RB1*C2*C4
 + RB1*RB2*RT2*C1*C4 + R3*RB2*RT2*C1*C4 + R2*RB2*RT2*C1*C4
 + R3*RB1*RT2*C1*C4 + R2*RB1*RT2*C1*C4 + R5*RB1*RB2*C1*C4
 + R3*RB1*RB2*C1*C4 + R2*RB1*RB2*C1*C4 + R3*R5*RB2*C1*C4
 + R2*R5*RB2*C1*C4 + R3*R5*RB1*C1*C4 + R2*R5*RB1*C1*C4
 + R3*RB2*RIN*C3*C4 + R2*RB2*RIN*C3*C4 + R3*RB1*RIN*C3*C4
 + R2*RB1*RIN*C3*C4 + R2*RB1*RB2*C3*C4 + R2*R3*RB2*C3*C4
 + R2*R3*RB1*C3*C4 + RB1*RB2*RIN*C3*C4;


var DEN_CIm = RB1*RT1*C2 + R3*RT1*C2 + R2*RT1*C2 + RB1*RIN*C2 + R3*RIN*C2 + R2*RIN*C2 + R5*RB1*C2
 + R3*RB1*C2 + R2*RB1*C2 + R3*R5*C2 + R2*R5*C2 + RB1*RT2*C1 + R3*RT2*C1 + R2*RT2*C1 + R5*RB1*C1 + R3*RB1*C1 + R2*RB1*C1 + R3*R5*C1 + R2*R5*C1
 + RB1*RIN*C3 + R3*RIN*C3 + R2*RIN*C3 + R2*RB1*C3 + R2*R3*C3 + RB1*RB2*C4 + R3*RB2*C4 + R2*RB2*C4 + R3*RB1*C4 + R2*RB1*C4;

var DEN_DRe =  RB1 + R3 + R2;


// Transfer function numerator multipliers for current I5
var NOM_I_AIm = R2*RB1*RB2*RT1*C2*C3*C4 + R2*R5*RB1*RB2*C2*C3*C4 + R2*R3*RB1*RB2*C2*C3*C4 + R2*R3*R5*RB2*C2*C3*C4 + R2*R3*R5*RB1*C2*C3*C4;
var NOM_I_BRe = R2*RB1*RB2*C3*C4 + R5*RB1*RB2*C2*C4 + R3*RB1*RB2*C2*C4 + R2*RB1*RB2*C2*C4 + R3*R5*RB2*C2*C4
 + R2*R5*RB2*C2*C4 + R3*R5*RB1*C2*C4 + R2*R5*RB1*C2*C4 + R2*RB1*RT1*C2*C3 + R2*R5*RB1*C2*C3 + R2*R3*RB1*C2*C3 + R2*R3*R5*C2*C3;
var NOM_I_CIm = R2*RB1*C3 + R5*RB1*C2 + R3*RB1*C2 + R2*RB1*C2 + R3*R5*C2 + R2*R5*C2;
var NOM_I_DRe = 0;

var NOM_II_XRe = NOM_I_AIm*C1*RT2;
var NOM_II_AIm = NOM_I_BRe*C1*RT2;
var NOM_II_BRe = NOM_I_CIm*C1*RT2;
var NOM_II_CIm = NOM_I_DRe*C1*RT2;

        // loop through the selected frequency points and do calculation
        for (j = 0; j < X.length; j++) {
            // w = 2*pi*f
            var w = 2*Math.PI*X[j];

            var XDEN_XRe =  w*w*w*w*DEN_XRe;
            var XDEN_AIm = -w*w*w*DEN_AIm;
            var XDEN_BRe = -w*w*DEN_BRe;
            var XDEN_CIm =  w*DEN_CIm;
            var XDEN_DRe =  DEN_DRe;

            var DENOMINATOR = ( (XDEN_XRe + XDEN_BRe + XDEN_DRe)*(XDEN_XRe + XDEN_BRe + XDEN_DRe) + (XDEN_AIm + XDEN_CIm)*(XDEN_AIm + XDEN_CIm) );

            var XNOM_I_XRe =  w*w*w*w*NOM_II_XRe;
            var XNOM_I_AIm = -w*w*w*(NOM_I_AIm + NOM_II_AIm);
            var XNOM_I_BRe = -w*w*(NOM_I_BRe + NOM_II_BRe);
            var XNOM_I_CIm =  w*(NOM_I_CIm + NOM_II_CIm);
            var XNOM_I_DRe =  NOM_I_DRe;

            var NUMERATOR_Re = (XNOM_I_XRe + XNOM_I_BRe + XNOM_I_DRe)*(XDEN_XRe + XDEN_BRe + XDEN_DRe) + (XNOM_I_AIm + XNOM_I_CIm)*(XDEN_AIm + XDEN_CIm);
            var NUMERATOR_Im = (XDEN_XRe + XDEN_BRe + XDEN_DRe)*(XNOM_I_AIm + XNOM_I_CIm) - (XNOM_I_XRe + XNOM_I_BRe + XNOM_I_DRe)*(XDEN_AIm + XDEN_CIm);

            var cur = Math.sqrt(NUMERATOR_Re*NUMERATOR_Re + NUMERATOR_Im*NUMERATOR_Im)/DENOMINATOR;

            row = [];
            row.push(X[j]);
            row.push( 20*Math.log(cur)/Math.log(10) );
            data.push(row);
        }
        if (!g) {
            g = createDyGraph(data, "E-series");
        } else {
            g.updateOptions({file: data});
        }
    }
</SCRIPT>
</FORM>
</BODY>
</HTML>