<!DOCTYPE html>
<HTML>
<HEAD>
<TITLE>TSC in the web</TITLE>
<LINK href="nouislider.min.css" rel="stylesheet"/>
<SCRIPT type="text/javascript" src="nouislider.min.js"></SCRIPT>
<LINK href="dygraph.css" rel="stylesheet"/>
<SCRIPT type="text/javascript" src="dygraph.min.js"></SCRIPT>
<SCRIPT type="text/javascript" src="tsc_common.js"></SCRIPT>

<STYLE>
#range_RB,
#range_RT,
#range_RM {
    width: 300px;
    margin: 0 auto 0px;
    display: inline-block;
}
#value_RB,
#value_RT,
#value_RM {
    width: 70px;
    display: inline-block;
    text-align: center;
    margin: 0;
}
#label_RB,
#label_RT,
#label_RM {
    width: 150px;
    display: inline-block;
    text-align: center;
    margin: 0;
}
</STYLE>

</HEAD>
<BODY>
<FORM name="frm">
  <TABLE border="1" align="center">
    <TR>
      <TD colspan="3" align="left">
        <DIV id="linkDiv" style="float: left;"></DIV>
        <DIV id="infoDiv" style="float: right;">[<a href="info.htm">INFO</a>]</DIV>
      </TD>
    </TR>
    <TR>
      <TD align="center" valign="top" width="400">
        <IMG src="bench2_pic.png"></IMG>
      </TD>
      <TD align="right" valign="top" width="180">
        <SMALL>
        RIN: <INPUT type="text" name="RIN" id="id_RIN" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        RT: <INPUT type="text" name="RT" id="id_RT" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        RB: <INPUT type="text" name="RB" id="id_RB" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        RM: <INPUT type="text" name="RM" id="id_RM" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        R4: <INPUT type="text" name="R4" id="id_R4" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        R5: <INPUT type="text" name="R5" id="id_R5" size="7" readonly="readonly" style="text-align: right"> &nbsp;&Omega;<BR>
        C1: <INPUT type="text" name="C1" id="id_C1" size="7" readonly="readonly" style="text-align: right"> pF<BR>
        C2: <INPUT type="text" name="C2" id="id_C2" size="7" readonly="readonly" style="text-align: right"> pF<BR>
        L1: <INPUT type="text" name="L1" id="id_L1" size="7" readonly="readonly" style="text-align: right"> mH<BR>
        L2: <INPUT type="text" name="L2" id="id_L2" size="7" readonly="readonly" style="text-align: right"> mH<BR><BR>
        </SMALL>
        <CENTER>
        <INPUT type="button" name="edit" value="Edit values" id="id_edit" onclick="editValues();"><BR>
        <INPUT type="button" name="apply" value="Apply values" id="id_apply" onclick="applyValues();"><BR>
        <INPUT type="button" name="defaults" value="Set default values" id="id_defaults" onclick="setDefaultValues();"><BR>
        </CENTER>
      </TD>  
      <TD rowspan="2" align="center" valign="top" width="700">
        <DIV id="legendDiv" style="float: right;"></DIV>
        <DIV id="graph" style="height:480px; width:640px"></DIV>
      </TD>
    </TR>
    <TR>
      <TD colspan="2">
        <BR>
        <SPAN id="label_RB">RB (LogB)</SPAN>
        <DIV id="range_RB"></DIV>
        <SPAN id="value_RB"></SPAN><BR><BR><BR><BR>
        <SPAN id="label_RM">RM (LogB)</SPAN>
        <DIV id="range_RM"></DIV>
        <SPAN id="value_RM"></SPAN><BR><BR><BR><BR>
        <SPAN id="label_RT">RT (LogB)</SPAN>
        <DIV id="range_RT"></DIV>
        <SPAN id="value_RT"></SPAN><BR><BR><BR><BR>
      </TD>
    </TR>
  </TABLE>

<SCRIPT>
    // create links to all the tone stack pages to the top of the page 
    createLinks("linkDiv","Bench");

    // component variables for calculation
    var RTreble;
    var RBass;
    var RMid;
    var RIN;
    var R4;
    var R5;
    var C1;
    var C2;
    var L1;
    var L2;

    // create sliders and save the div-element of the slider
    var range_RB = createSlider('range_RB','value_RB');
    var range_RM = createSlider('range_RM','value_RM');
    var range_RT = createSlider('range_RT','value_RT');

    // variable g will hold the graph object for synchronized updates
    var g = null;

    // data for frequency points is created here and saved to array X
    X = createFrequencies(90,10,100000,1);

    // set the default values to the component variables and input fields
    setDefaultValues();

    // start listening the onSlide event from the slider and run the analysis function
    range_RB.noUiSlider.on('slide', doCalc);
    range_RM.noUiSlider.on('slide', doCalc);
    range_RT.noUiSlider.on('slide', doCalc);

    function applyValues() {
        RIN     = parseInt(document.frm.RIN.value);
        R4      = parseInt(document.frm.R4.value);
        RBass   = parseInt(document.frm.RB.value);
        RMid    = parseInt(document.frm.RM.value);
        RTreble = parseInt(document.frm.RT.value);
        R5      = parseInt(document.frm.R5.value);
        C1     = (1e-12)*parseInt(document.frm.C1.value);
        C2     = (1e-12)*parseInt(document.frm.C2.value);
        L1     = (1e-3)*parseInt(document.frm.L1.value);
        L2     = (1e-3)*parseInt(document.frm.L2.value);

        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].setAttribute('readonly', 'readonly');
                inputElements[i].style.backgroundColor = "#EBEBE4";
            }
        }
        doCalc();
    }


    function editValues() {
        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].removeAttribute('readonly');
                inputElements[i].style.backgroundColor = "#FFFFFF";
            }
        }
    }


    function setDefaultValues() {
        document.frm.RIN.value = 13000;
        document.frm.R4.value  = 51000;
        document.frm.RT.value  = 100000;
        document.frm.RB.value  = 100000;
        document.frm.RM.value  = 100000;
        document.frm.R5.value  = 5100;
        document.frm.C1.value  = 22000;
        document.frm.C2.value  = 6800;
        document.frm.L1.value  = 6000;
        document.frm.L2.value  = 20000;
        
        applyValues();
    }


    // This function is called with every change of the slider.
    // It does the hard math and evaluates the filter transfer function
    // for the given frequency range and updates values to the graph.
    function doCalc() {
        var row = [];
        var data = [];

        // pot rotation 0 - 10 from the slider component
        var RotTreble = logBPotModel(range_RT.noUiSlider.get());
        var RotMid    = logBPotModel(range_RM.noUiSlider.get());
        var RotBass   = logBPotModel(range_RB.noUiSlider.get());

        var RT2  = Math.round( RTreble*(1.0*RotTreble/10.0) );
        var RT1  = Math.round( RTreble*(1.0 - 1.0*RotTreble/10.0) );
        var RB2  = Math.round( RBass*(1.0*RotBass/10.0) );
        var RB1  = Math.round( RBass*(1.0 - 1.0*RotBass/10.0) );
        var RM2  = Math.round( RMid*(1.0*RotMid/10.0) );
        var RM1  = Math.round( RMid*(1.0 - 1.0*RotMid/10.0) );


var DEN_XRe = C1*C2*L1*L2*RB2*RIN*RM2*RT1*RT2 + C1*C2*L1*L2*RB1*RIN*RM2*RT1*RT2
 + C1*C2*L1*L2*R5*RIN*RM2*RT1*RT2 + C1*C2*L1*L2*R4*RIN*RM2*RT1*RT2
 + C1*C2*L1*L2*R5*RB2*RM2*RT1*RT2 + C1*C2*L1*L2*R4*RB2*RM2*RT1*RT2
 + C1*C2*L1*L2*R5*RB1*RM2*RT1*RT2 + C1*C2*L1*L2*R4*RB1*RM2*RT1*RT2
 + C1*C2*L1*L2*RB2*RIN*RM1*RT1*RT2 + C1*C2*L1*L2*RB1*RIN*RM1*RT1*RT2
 + C1*C2*L1*L2*R5*RIN*RM1*RT1*RT2 + C1*C2*L1*L2*R4*RIN*RM1*RT1*RT2
 + C1*C2*L1*L2*R5*RB2*RM1*RT1*RT2 + C1*C2*L1*L2*R4*RB2*RM1*RT1*RT2
 + C1*C2*L1*L2*R5*RB1*RM1*RT1*RT2 + C1*C2*L1*L2*R4*RB1*RM1*RT1*RT2
 + C1*C2*L1*L2*R5*RB2*RIN*RT1*RT2 + C1*C2*L1*L2*R4*RB2*RIN*RT1*RT2
 + C1*C2*L1*L2*R5*RB1*RIN*RT1*RT2 + C1*C2*L1*L2*R4*RB1*RIN*RT1*RT2
 + C1*C2*L1*L2*R4*RB2*RIN*RM2*RT2 + C1*C2*L1*L2*R4*RB1*RIN*RM2*RT2
 + C1*C2*L1*L2*R4*R5*RIN*RM2*RT2 + C1*C2*L1*L2*R4*R5*RB2*RM2*RT2
 + C1*C2*L1*L2*R4*R5*RB1*RM2*RT2 + C1*C2*L1*L2*R4*RB2*RIN*RM1*RT2
 + C1*C2*L1*L2*R4*RB1*RIN*RM1*RT2 + C1*C2*L1*L2*R4*R5*RIN*RM1*RT2
 + C1*C2*L1*L2*R4*R5*RB2*RM1*RT2 + C1*C2*L1*L2*R4*R5*RB1*RM1*RT2
 + C1*C2*L1*L2*R4*R5*RB2*RIN*RT2 + C1*C2*L1*L2*R4*R5*RB1*RIN*RT2
 + C1*C2*L1*L2*R5*RB2*RIN*RM2*RT1 + C1*C2*L1*L2*R5*RB1*RIN*RM2*RT1
 + C1*C2*L1*L2*R4*R5*RIN*RM2*RT1 + C1*C2*L1*L2*R4*R5*RB2*RM2*RT1
 + C1*C2*L1*L2*R4*R5*RB1*RM2*RT1 + C1*C2*L1*L2*R5*RB2*RIN*RM1*RT1
 + C1*C2*L1*L2*R5*RB1*RIN*RM1*RT1 + C1*C2*L1*L2*R4*R5*RIN*RM1*RT1
 + C1*C2*L1*L2*R4*R5*RB2*RM1*RT1 + C1*C2*L1*L2*R4*R5*RB1*RM1*RT1
 + C1*C2*L1*L2*R4*R5*RB2*RIN*RT1 + C1*C2*L1*L2*R4*R5*RB1*RIN*RT1
 + C1*C2*L1*L2*R4*R5*RB2*RIN*RM2 + C1*C2*L1*L2*R4*R5*RB1*RIN*RM2
 + C1*C2*L1*L2*R4*R5*RB2*RIN*RM1 + C1*C2*L1*L2*R4*R5*RB1*RIN*RM1;

var DEN_AIm = C1*C2*L2*RB2*RIN*RM1*RM2*RT1*RT2 + C1*C2*L2*RB1*RIN*RM1*RM2*RT1*RT2
 + C1*C2*L2*R5*RIN*RM1*RM2*RT1*RT2 + C1*C2*L2*R4*RIN*RM1*RM2*RT1*RT2
 + C1*C2*L2*R5*RB2*RM1*RM2*RT1*RT2 + C1*C2*L2*R4*RB2*RM1*RM2*RT1*RT2
 + C1*C2*L2*R5*RB1*RM1*RM2*RT1*RT2 + C1*C2*L2*R4*RB1*RM1*RM2*RT1*RT2
 + C1*C2*L1*RB1*RB2*RIN*RM2*RT1*RT2 + C1*C2*L2*R4*RB2*RIN*RM2*RT1*RT2
 + C1*C2*L1*R4*RB2*RIN*RM2*RT1*RT2 + C1*C2*L1*R5*RB1*RIN*RM2*RT1*RT2
 + C1*C2*L2*R4*RB1*RIN*RM2*RT1*RT2 + C1*C2*L2*R4*R5*RIN*RM2*RT1*RT2
 + C1*C2*L1*R4*R5*RIN*RM2*RT1*RT2 + C1*C2*L1*R5*RB1*RB2*RM2*RT1*RT2
 + C1*C2*L1*R4*RB1*RB2*RM2*RT1*RT2 + C1*C2*L2*R4*R5*RB2*RM2*RT1*RT2
 + C1*C2*L1*R4*R5*RB2*RM2*RT1*RT2 + C1*C2*L2*R4*R5*RB1*RM2*RT1*RT2
 + C1*C2*L1*R4*R5*RB1*RM2*RT1*RT2 + C1*C2*L1*RB1*RB2*RIN*RM1*RT1*RT2
 + C1*C2*L2*R5*RB2*RIN*RM1*RT1*RT2 + C1*C2*L1*R4*RB2*RIN*RM1*RT1*RT2
 + C1*C2*L2*R5*RB1*RIN*RM1*RT1*RT2 + C1*C2*L1*R5*RB1*RIN*RM1*RT1*RT2
 + C1*C2*L2*R4*R5*RIN*RM1*RT1*RT2 + C1*C2*L1*R4*R5*RIN*RM1*RT1*RT2
 + C1*C2*L1*R5*RB1*RB2*RM1*RT1*RT2 + C1*C2*L1*R4*RB1*RB2*RM1*RT1*RT2
 + C1*C2*L2*R4*R5*RB2*RM1*RT1*RT2 + C1*C2*L1*R4*R5*RB2*RM1*RT1*RT2
 + C1*C2*L2*R4*R5*RB1*RM1*RT1*RT2 + C1*C2*L1*R4*R5*RB1*RM1*RT1*RT2
 + C1*C2*L1*R5*RB1*RB2*RIN*RT1*RT2 + C1*C2*L1*R4*RB1*RB2*RIN*RT1*RT2
 + C1*C2*L2*R4*R5*RB2*RIN*RT1*RT2 + C1*C2*L1*R4*R5*RB2*RIN*RT1*RT2
 + C1*C2*L2*R4*R5*RB1*RIN*RT1*RT2 + C1*C2*L1*R4*R5*RB1*RIN*RT1*RT2
 + C1*C2*L2*R4*RB2*RIN*RM1*RM2*RT2 + C1*C2*L2*R4*RB1*RIN*RM1*RM2*RT2
 + C1*C2*L2*R4*R5*RIN*RM1*RM2*RT2 + C1*C2*L2*R4*R5*RB2*RM1*RM2*RT2
 + C1*C2*L2*R4*R5*RB1*RM1*RM2*RT2 + C1*C2*L1*R4*RB1*RB2*RIN*RM2*RT2
 + C1*L1*L2*RB2*RIN*RM2*RT2 + C1*C2*L1*R4*R5*RB1*RIN*RM2*RT2
 + C1*L1*L2*RB1*RIN*RM2*RT2 + C1*L1*L2*R5*RIN*RM2*RT2 + C1*L1*L2*R4*RIN*RM2*RT2
 + C1*C2*L1*R4*R5*RB1*RB2*RM2*RT2 + C1*L1*L2*R5*RB2*RM2*RT2
 + C1*L1*L2*R4*RB2*RM2*RT2 + C1*L1*L2*R5*RB1*RM2*RT2 + C1*L1*L2*R4*RB1*RM2*RT2
 + C1*C2*L1*R4*RB1*RB2*RIN*RM1*RT2 + C1*C2*L2*R4*R5*RB2*RIN*RM1*RT2
 + C1*L1*L2*RB2*RIN*RM1*RT2 + C1*C2*L2*R4*R5*RB1*RIN*RM1*RT2
 + C1*C2*L1*R4*R5*RB1*RIN*RM1*RT2 + C1*L1*L2*RB1*RIN*RM1*RT2
 + C1*L1*L2*R5*RIN*RM1*RT2 + C1*L1*L2*R4*RIN*RM1*RT2
 + C1*C2*L1*R4*R5*RB1*RB2*RM1*RT2 + C1*L1*L2*R5*RB2*RM1*RT2
 + C1*L1*L2*R4*RB2*RM1*RT2 + C1*L1*L2*R5*RB1*RM1*RT2 + C1*L1*L2*R4*RB1*RM1*RT2
 + C1*C2*L1*R4*R5*RB1*RB2*RIN*RT2 + C1*L1*L2*R5*RB2*RIN*RT2
 + C1*L1*L2*R4*RB2*RIN*RT2 + C1*L1*L2*R5*RB1*RIN*RT2 + C1*L1*L2*R4*RB1*RIN*RT2
 + C1*C2*L2*R5*RB2*RIN*RM1*RM2*RT1 + C1*C2*L2*R5*RB1*RIN*RM1*RM2*RT1
 + C1*C2*L2*R4*R5*RIN*RM1*RM2*RT1 + C1*C2*L2*R4*R5*RB2*RM1*RM2*RT1
 + C1*C2*L2*R4*R5*RB1*RM1*RM2*RT1 + C1*C2*L1*R5*RB1*RB2*RIN*RM2*RT1
 + C1*C2*L2*R4*R5*RB2*RIN*RM2*RT1 + C1*C2*L1*R4*R5*RB2*RIN*RM2*RT1
 + C1*L1*L2*RB2*RIN*RM2*RT1 + C1*C2*L2*R4*R5*RB1*RIN*RM2*RT1
 + C1*L1*L2*RB1*RIN*RM2*RT1 + C1*L1*L2*R5*RIN*RM2*RT1 + C1*L1*L2*R4*RIN*RM2*RT1
 + C1*C2*L1*R4*R5*RB1*RB2*RM2*RT1 + C1*L1*L2*R5*RB2*RM2*RT1
 + C1*L1*L2*R4*RB2*RM2*RT1 + C1*L1*L2*R5*RB1*RM2*RT1 + C1*L1*L2*R4*RB1*RM2*RT1
 + C1*C2*L1*R5*RB1*RB2*RIN*RM1*RT1 + C1*C2*L1*R4*R5*RB2*RIN*RM1*RT1
 + C1*L1*L2*RB2*RIN*RM1*RT1 + C1*L1*L2*RB1*RIN*RM1*RT1
 + C1*L1*L2*R5*RIN*RM1*RT1 + C1*L1*L2*R4*RIN*RM1*RT1
 + C1*C2*L1*R4*R5*RB1*RB2*RM1*RT1 + C1*L1*L2*R5*RB2*RM1*RT1
 + C1*L1*L2*R4*RB2*RM1*RT1 + C1*L1*L2*R5*RB1*RM1*RT1 + C1*L1*L2*R4*RB1*RM1*RT1
 + C1*C2*L1*R4*R5*RB1*RB2*RIN*RT1 + C1*L1*L2*R5*RB2*RIN*RT1
 + C1*L1*L2*R4*RB2*RIN*RT1 + C1*L1*L2*R5*RB1*RIN*RT1 + C1*L1*L2*R4*RB1*RIN*RT1
 + C1*C2*L2*R4*R5*RB2*RIN*RM1*RM2 + C1*C2*L2*R4*R5*RB1*RIN*RM1*RM2
 + C1*C2*L1*R4*R5*RB1*RB2*RIN*RM2 + C1*L1*L2*R5*RB2*RIN*RM2
 + C1*L1*L2*R4*RB2*RIN*RM2 + C1*L1*L2*R5*RB1*RIN*RM2 + C1*L1*L2*R4*RB1*RIN*RM2
 + C1*C2*L1*R4*R5*RB1*RB2*RIN*RM1 + C1*L1*L2*R5*RB2*RIN*RM1
 + C1*L1*L2*R4*RB2*RIN*RM1 + C1*L1*L2*R5*RB1*RIN*RM1 + C1*L1*L2*R4*RB1*RIN*RM1


var DEN_BRe = C1*C2*RB1*RB2*RIN*RM1*RM2*RT1*RT2 + C1*C2*R4*RB2*RIN*RM1*RM2*RT1*RT2
 + C1*C2*R5*RB1*RIN*RM1*RM2*RT1*RT2 + C1*C2*R4*R5*RIN*RM1*RM2*RT1*RT2
 + C1*C2*R5*RB1*RB2*RM1*RM2*RT1*RT2 + C1*C2*R4*RB1*RB2*RM1*RM2*RT1*RT2
 + C1*C2*R4*R5*RB2*RM1*RM2*RT1*RT2 + C1*C2*R4*R5*RB1*RM1*RM2*RT1*RT2
 + C1*C2*R4*RB1*RB2*RIN*RM2*RT1*RT2 + C2*L2*RB2*RIN*RM2*RT1*RT2
 + C1*C2*R4*R5*RB1*RIN*RM2*RT1*RT2 + C2*L2*RB1*RIN*RM2*RT1*RT2
 + C2*L2*R5*RIN*RM2*RT1*RT2 + C2*L2*R4*RIN*RM2*RT1*RT2
 + C1*C2*R4*R5*RB1*RB2*RM2*RT1*RT2 + C2*L2*R5*RB2*RM2*RT1*RT2
 + C2*L2*R4*RB2*RM2*RT1*RT2 + C2*L2*R5*RB1*RM2*RT1*RT2
 + C2*L2*R4*RB1*RM2*RT1*RT2 + C1*C2*R5*RB1*RB2*RIN*RM1*RT1*RT2
 + C1*C2*R4*R5*RB2*RIN*RM1*RT1*RT2 + C2*L2*RB2*RIN*RM1*RT1*RT2
 + C2*L2*RB1*RIN*RM1*RT1*RT2 + C2*L2*R5*RIN*RM1*RT1*RT2
 + C2*L2*R4*RIN*RM1*RT1*RT2 + C1*C2*R4*R5*RB1*RB2*RM1*RT1*RT2
 + C2*L2*R5*RB2*RM1*RT1*RT2 + C2*L2*R4*RB2*RM1*RT1*RT2
 + C2*L2*R5*RB1*RM1*RT1*RT2 + C2*L2*R4*RB1*RM1*RT1*RT2
 + C1*C2*R4*R5*RB1*RB2*RIN*RT1*RT2 + C2*L2*R5*RB2*RIN*RT1*RT2
 + C2*L2*R4*RB2*RIN*RT1*RT2 + C2*L2*R5*RB1*RIN*RT1*RT2
 + C2*L2*R4*RB1*RIN*RT1*RT2 + C1*C2*R4*RB1*RB2*RIN*RM1*RM2*RT2
 + C1*L2*RB2*RIN*RM1*RM2*RT2 + C1*C2*R4*R5*RB1*RIN*RM1*RM2*RT2
 + C1*L2*RB1*RIN*RM1*RM2*RT2 + C1*L2*R5*RIN*RM1*RM2*RT2
 + C1*L2*R4*RIN*RM1*RM2*RT2 + C1*C2*R4*R5*RB1*RB2*RM1*RM2*RT2
 + C1*L2*R5*RB2*RM1*RM2*RT2 + C1*L2*R4*RB2*RM1*RM2*RT2
 + C1*L2*R5*RB1*RM1*RM2*RT2 + C1*L2*R4*RB1*RM1*RM2*RT2
 + C1*L1*RB1*RB2*RIN*RM2*RT2 + C2*L2*R4*RB2*RIN*RM2*RT2
 + C1*L2*R4*RB2*RIN*RM2*RT2 + C1*L1*R4*RB2*RIN*RM2*RT2
 + C1*L1*R5*RB1*RIN*RM2*RT2 + C2*L2*R4*RB1*RIN*RM2*RT2
 + C1*L2*R4*RB1*RIN*RM2*RT2 + C2*L2*R4*R5*RIN*RM2*RT2 + C1*L2*R4*R5*RIN*RM2*RT2
 + C1*L1*R4*R5*RIN*RM2*RT2 + C1*L1*R5*RB1*RB2*RM2*RT2
 + C1*L1*R4*RB1*RB2*RM2*RT2 + C2*L2*R4*R5*RB2*RM2*RT2 + C1*L2*R4*R5*RB2*RM2*RT2
 + C1*L1*R4*R5*RB2*RM2*RT2 + C2*L2*R4*R5*RB1*RM2*RT2 + C1*L2*R4*R5*RB1*RM2*RT2
 + C1*L1*R4*R5*RB1*RM2*RT2 + C1*C2*R4*R5*RB1*RB2*RIN*RM1*RT2
 + C1*L1*RB1*RB2*RIN*RM1*RT2 + C1*L2*R5*RB2*RIN*RM1*RT2
 + C2*L2*R4*RB2*RIN*RM1*RT2 + C1*L1*R4*RB2*RIN*RM1*RT2
 + C1*L2*R5*RB1*RIN*RM1*RT2 + C1*L1*R5*RB1*RIN*RM1*RT2
 + C2*L2*R4*RB1*RIN*RM1*RT2 + C2*L2*R4*R5*RIN*RM1*RT2 + C1*L2*R4*R5*RIN*RM1*RT2
 + C1*L1*R4*R5*RIN*RM1*RT2 + C1*L1*R5*RB1*RB2*RM1*RT2
 + C1*L1*R4*RB1*RB2*RM1*RT2 + C2*L2*R4*R5*RB2*RM1*RT2 + C1*L2*R4*R5*RB2*RM1*RT2
 + C1*L1*R4*R5*RB2*RM1*RT2 + C2*L2*R4*R5*RB1*RM1*RT2 + C1*L2*R4*R5*RB1*RM1*RT2
 + C1*L1*R4*R5*RB1*RM1*RT2 + C1*L1*R5*RB1*RB2*RIN*RT2
 + C1*L1*R4*RB1*RB2*RIN*RT2 + C2*L2*R4*R5*RB2*RIN*RT2 + C1*L2*R4*R5*RB2*RIN*RT2
 + C1*L1*R4*R5*RB2*RIN*RT2 + C2*L2*R4*R5*RB1*RIN*RT2 + C1*L2*R4*R5*RB1*RIN*RT2
 + C1*L1*R4*R5*RB1*RIN*RT2 + C1*C2*R5*RB1*RB2*RIN*RM1*RM2*RT1
 + C1*C2*R4*R5*RB2*RIN*RM1*RM2*RT1 + C1*L2*RB2*RIN*RM1*RM2*RT1
 + C1*L2*RB1*RIN*RM1*RM2*RT1 + C1*L2*R5*RIN*RM1*RM2*RT1
 + C1*L2*R4*RIN*RM1*RM2*RT1 + C1*C2*R4*R5*RB1*RB2*RM1*RM2*RT1
 + C1*L2*R5*RB2*RM1*RM2*RT1 + C1*L2*R4*RB2*RM1*RM2*RT1
 + C1*L2*R5*RB1*RM1*RM2*RT1 + C1*L2*R4*RB1*RM1*RM2*RT1
 + C1*C2*R4*R5*RB1*RB2*RIN*RM2*RT1 + C1*L1*RB1*RB2*RIN*RM2*RT1
 + C2*L2*R5*RB2*RIN*RM2*RT1 + C1*L2*R4*RB2*RIN*RM2*RT1
 + C1*L1*R4*RB2*RIN*RM2*RT1 + C2*L2*R5*RB1*RIN*RM2*RT1
 + C1*L1*R5*RB1*RIN*RM2*RT1 + C1*L2*R4*RB1*RIN*RM2*RT1
 + C2*L2*R4*R5*RIN*RM2*RT1 + C1*L2*R4*R5*RIN*RM2*RT1 + C1*L1*R4*R5*RIN*RM2*RT1
 + C1*L1*R5*RB1*RB2*RM2*RT1 + C1*L1*R4*RB1*RB2*RM2*RT1
 + C2*L2*R4*R5*RB2*RM2*RT1 + C1*L2*R4*R5*RB2*RM2*RT1 + C1*L1*R4*R5*RB2*RM2*RT1
 + C2*L2*R4*R5*RB1*RM2*RT1 + C1*L2*R4*R5*RB1*RM2*RT1 + C1*L1*R4*R5*RB1*RM2*RT1
 + C1*L1*RB1*RB2*RIN*RM1*RT1 + C2*L2*R5*RB2*RIN*RM1*RT1
 + C1*L2*R5*RB2*RIN*RM1*RT1 + C1*L1*R4*RB2*RIN*RM1*RT1
 + C2*L2*R5*RB1*RIN*RM1*RT1 + C1*L2*R5*RB1*RIN*RM1*RT1
 + C1*L1*R5*RB1*RIN*RM1*RT1 + C2*L2*R4*R5*RIN*RM1*RT1 + C1*L2*R4*R5*RIN*RM1*RT1
 + C1*L1*R4*R5*RIN*RM1*RT1 + C1*L1*R5*RB1*RB2*RM1*RT1
 + C1*L1*R4*RB1*RB2*RM1*RT1 + C2*L2*R4*R5*RB2*RM1*RT1 + C1*L2*R4*R5*RB2*RM1*RT1
 + C1*L1*R4*R5*RB2*RM1*RT1 + C2*L2*R4*R5*RB1*RM1*RT1 + C1*L2*R4*R5*RB1*RM1*RT1
 + C1*L1*R4*R5*RB1*RM1*RT1 + C1*L1*R5*RB1*RB2*RIN*RT1
 + C1*L1*R4*RB1*RB2*RIN*RT1 + C2*L2*R4*R5*RB2*RIN*RT1 + C1*L2*R4*R5*RB2*RIN*RT1
 + C1*L1*R4*R5*RB2*RIN*RT1 + C2*L2*R4*R5*RB1*RIN*RT1 + C1*L2*R4*R5*RB1*RIN*RT1
 + C1*L1*R4*R5*RB1*RIN*RT1 + C1*C2*R4*R5*RB1*RB2*RIN*RM1*RM2
 + C1*L2*R5*RB2*RIN*RM1*RM2 + C1*L2*R4*RB2*RIN*RM1*RM2
 + C1*L2*R5*RB1*RIN*RM1*RM2 + C1*L2*R4*RB1*RIN*RM1*RM2
 + C1*L1*R5*RB1*RB2*RIN*RM2 + C1*L1*R4*RB1*RB2*RIN*RM2
 + C2*L2*R4*R5*RB2*RIN*RM2 + C1*L2*R4*R5*RB2*RIN*RM2 + C1*L1*R4*R5*RB2*RIN*RM2
 + C2*L2*R4*R5*RB1*RIN*RM2 + C1*L2*R4*R5*RB1*RIN*RM2 + C1*L1*R4*R5*RB1*RIN*RM2
 + C1*L1*R5*RB1*RB2*RIN*RM1 + C1*L1*R4*RB1*RB2*RIN*RM1
 + C2*L2*R4*R5*RB2*RIN*RM1 + C1*L2*R4*R5*RB2*RIN*RM1 + C1*L1*R4*R5*RB2*RIN*RM1
 + C2*L2*R4*R5*RB1*RIN*RM1 + C1*L2*R4*R5*RB1*RIN*RM1 + C1*L1*R4*R5*RB1*RIN*RM1;

var DEN_CIm = C2*RB1*RB2*RIN*RM2*RT1*RT2 + C2*R4*RB2*RIN*RM2*RT1*RT2
 + C2*R5*RB1*RIN*RM2*RT1*RT2 + C2*R4*R5*RIN*RM2*RT1*RT2
 + C2*R5*RB1*RB2*RM2*RT1*RT2 + C2*R4*RB1*RB2*RM2*RT1*RT2
 + C2*R4*R5*RB2*RM2*RT1*RT2 + C2*R4*R5*RB1*RM2*RT1*RT2
 + C2*RB1*RB2*RIN*RM1*RT1*RT2 + C2*R4*RB2*RIN*RM1*RT1*RT2
 + C2*R5*RB1*RIN*RM1*RT1*RT2 + C2*R4*R5*RIN*RM1*RT1*RT2
 + C2*R5*RB1*RB2*RM1*RT1*RT2 + C2*R4*RB1*RB2*RM1*RT1*RT2
 + C2*R4*R5*RB2*RM1*RT1*RT2 + C2*R4*R5*RB1*RM1*RT1*RT2
 + C2*R5*RB1*RB2*RIN*RT1*RT2 + C2*R4*RB1*RB2*RIN*RT1*RT2
 + C2*R4*R5*RB2*RIN*RT1*RT2 + C2*R4*R5*RB1*RIN*RT1*RT2
 + C1*RB1*RB2*RIN*RM1*RM2*RT2 + C1*R4*RB2*RIN*RM1*RM2*RT2
 + C1*R5*RB1*RIN*RM1*RM2*RT2 + C1*R4*R5*RIN*RM1*RM2*RT2
 + C1*R5*RB1*RB2*RM1*RM2*RT2 + C1*R4*RB1*RB2*RM1*RM2*RT2
 + C1*R4*R5*RB2*RM1*RM2*RT2 + C1*R4*R5*RB1*RM1*RM2*RT2
 + C2*R4*RB1*RB2*RIN*RM2*RT2 + C1*R4*RB1*RB2*RIN*RM2*RT2 + L2*RB2*RIN*RM2*RT2
 + C2*R4*R5*RB1*RIN*RM2*RT2 + C1*R4*R5*RB1*RIN*RM2*RT2 + L2*RB1*RIN*RM2*RT2
 + L2*R5*RIN*RM2*RT2 + L2*R4*RIN*RM2*RT2 + C2*R4*R5*RB1*RB2*RM2*RT2
 + C1*R4*R5*RB1*RB2*RM2*RT2 + L2*R5*RB2*RM2*RT2 + L2*R4*RB2*RM2*RT2
 + L2*R5*RB1*RM2*RT2 + L2*R4*RB1*RM2*RT2 + C1*R5*RB1*RB2*RIN*RM1*RT2
 + C2*R4*RB1*RB2*RIN*RM1*RT2 + C1*R4*R5*RB2*RIN*RM1*RT2 + L2*RB2*RIN*RM1*RT2
 + C2*R4*R5*RB1*RIN*RM1*RT2 + L2*RB1*RIN*RM1*RT2 + L2*R5*RIN*RM1*RT2
 + L2*R4*RIN*RM1*RT2 + C2*R4*R5*RB1*RB2*RM1*RT2 + C1*R4*R5*RB1*RB2*RM1*RT2
 + L2*R5*RB2*RM1*RT2 + L2*R4*RB2*RM1*RT2 + L2*R5*RB1*RM1*RT2
 + L2*R4*RB1*RM1*RT2 + C2*R4*R5*RB1*RB2*RIN*RT2 + C1*R4*R5*RB1*RB2*RIN*RT2
 + L2*R5*RB2*RIN*RT2 + L2*R4*RB2*RIN*RT2 + L2*R5*RB1*RIN*RT2
 + L2*R4*RB1*RIN*RT2 + C1*RB1*RB2*RIN*RM1*RM2*RT1 + C1*R4*RB2*RIN*RM1*RM2*RT1
 + C1*R5*RB1*RIN*RM1*RM2*RT1 + C1*R4*R5*RIN*RM1*RM2*RT1
 + C1*R5*RB1*RB2*RM1*RM2*RT1 + C1*R4*RB1*RB2*RM1*RM2*RT1
 + C1*R4*R5*RB2*RM1*RM2*RT1 + C1*R4*R5*RB1*RM1*RM2*RT1
 + C2*R5*RB1*RB2*RIN*RM2*RT1 + C1*R4*RB1*RB2*RIN*RM2*RT1
 + C2*R4*R5*RB2*RIN*RM2*RT1 + L2*RB2*RIN*RM2*RT1 + C1*R4*R5*RB1*RIN*RM2*RT1
 + L2*RB1*RIN*RM2*RT1 + L2*R5*RIN*RM2*RT1 + L2*R4*RIN*RM2*RT1
 + C2*R4*R5*RB1*RB2*RM2*RT1 + C1*R4*R5*RB1*RB2*RM2*RT1 + L2*R5*RB2*RM2*RT1
 + L2*R4*RB2*RM2*RT1 + L2*R5*RB1*RM2*RT1 + L2*R4*RB1*RM2*RT1
 + C2*R5*RB1*RB2*RIN*RM1*RT1 + C1*R5*RB1*RB2*RIN*RM1*RT1
 + C2*R4*R5*RB2*RIN*RM1*RT1 + C1*R4*R5*RB2*RIN*RM1*RT1 + L2*RB2*RIN*RM1*RT1
 + L2*RB1*RIN*RM1*RT1 + L2*R5*RIN*RM1*RT1 + L2*R4*RIN*RM1*RT1
 + C2*R4*R5*RB1*RB2*RM1*RT1 + C1*R4*R5*RB1*RB2*RM1*RT1 + L2*R5*RB2*RM1*RT1
 + L2*R4*RB2*RM1*RT1 + L2*R5*RB1*RM1*RT1 + L2*R4*RB1*RM1*RT1
 + C2*R4*R5*RB1*RB2*RIN*RT1 + C1*R4*R5*RB1*RB2*RIN*RT1 + L2*R5*RB2*RIN*RT1
 + L2*R4*RB2*RIN*RT1 + L2*R5*RB1*RIN*RT1 + L2*R4*RB1*RIN*RT1
 + C1*R5*RB1*RB2*RIN*RM1*RM2 + C1*R4*RB1*RB2*RIN*RM1*RM2
 + C1*R4*R5*RB2*RIN*RM1*RM2 + C1*R4*R5*RB1*RIN*RM1*RM2
 + C2*R4*R5*RB1*RB2*RIN*RM2 + C1*R4*R5*RB1*RB2*RIN*RM2 + L2*R5*RB2*RIN*RM2
 + L2*R4*RB2*RIN*RM2 + L2*R5*RB1*RIN*RM2 + L2*R4*RB1*RIN*RM2
 + C2*R4*R5*RB1*RB2*RIN*RM1 + C1*R4*R5*RB1*RB2*RIN*RM1 + L2*R5*RB2*RIN*RM1
 + L2*R4*RB2*RIN*RM1 + L2*R5*RB1*RIN*RM1 + L2*R4*RB1*RIN*RM1;

var DEN_DRe = RB1*RB2*RIN*RM2*RT2 + R4*RB2*RIN*RM2*RT2 + R5*RB1*RIN*RM2*RT2
 + R4*R5*RIN*RM2*RT2 + R5*RB1*RB2*RM2*RT2 + R4*RB1*RB2*RM2*RT2
 + R4*R5*RB2*RM2*RT2 + R4*R5*RB1*RM2*RT2 + RB1*RB2*RIN*RM1*RT2
 + R4*RB2*RIN*RM1*RT2 + R5*RB1*RIN*RM1*RT2 + R4*R5*RIN*RM1*RT2
 + R5*RB1*RB2*RM1*RT2 + R4*RB1*RB2*RM1*RT2 + R4*R5*RB2*RM1*RT2
 + R4*R5*RB1*RM1*RT2 + R5*RB1*RB2*RIN*RT2 + R4*RB1*RB2*RIN*RT2
 + R4*R5*RB2*RIN*RT2 + R4*R5*RB1*RIN*RT2 + RB1*RB2*RIN*RM2*RT1
 + R4*RB2*RIN*RM2*RT1 + R5*RB1*RIN*RM2*RT1 + R4*R5*RIN*RM2*RT1
 + R5*RB1*RB2*RM2*RT1 + R4*RB1*RB2*RM2*RT1 + R4*R5*RB2*RM2*RT1
 + R4*R5*RB1*RM2*RT1 + RB1*RB2*RIN*RM1*RT1 + R4*RB2*RIN*RM1*RT1
 + R5*RB1*RIN*RM1*RT1 + R4*R5*RIN*RM1*RT1 + R5*RB1*RB2*RM1*RT1
 + R4*RB1*RB2*RM1*RT1 + R4*R5*RB2*RM1*RT1 + R4*R5*RB1*RM1*RT1
 + R5*RB1*RB2*RIN*RT1 + R4*RB1*RB2*RIN*RT1 + R4*R5*RB2*RIN*RT1
 + R4*R5*RB1*RIN*RT1 + R5*RB1*RB2*RIN*RM2 + R4*RB1*RB2*RIN*RM2
 + R4*R5*RB2*RIN*RM2 + R4*R5*RB1*RIN*RM2 + R5*RB1*RB2*RIN*RM1
 + R4*RB1*RB2*RIN*RM1 + R4*R5*RB2*RIN*RM1 + R4*R5*RB1*RIN*RM1;


var NOM_XRe = C1*C2*L1*L2*RB2*RM2*RT1*RT2 + C1*C2*L1*L2*RB1*RM2*RT1*RT2
 + C1*C2*L1*L2*RB2*RM1*RT1*RT2 + C1*C2*L1*L2*RB1*RM1*RT1*RT2
 + C1*C2*L1*L2*R4*RB2*RM2*RT2 + C1*C2*L1*L2*R4*RB1*RM2*RT2
 + C1*C2*L1*L2*R4*RB2*RM1*RT2 + C1*C2*L1*L2*R4*RB1*RM1*RT2;

var NOM_AIm =  C1*C2*L2*RB2*RM1*RM2*RT1*RT2 + C1*C2*L2*RB1*RM1*RM2*RT1*RT2
 + C1*C2*L1*RB1*RB2*RM2*RT1*RT2 + C1*C2*L2*R4*RB2*RM2*RT1*RT2
 + C1*C2*L1*R4*RB2*RM2*RT1*RT2 + C1*C2*L2*R4*RB1*RM2*RT1*RT2
 + C1*C2*L1*RB1*RB2*RM1*RT1*RT2 + C1*C2*L1*R4*RB2*RM1*RT1*RT2
 + C1*C2*L2*R4*RB2*RM1*RM2*RT2 + C1*C2*L2*R4*RB1*RM1*RM2*RT2
 + C1*C2*L1*R4*RB1*RB2*RM2*RT2 + C1*L1*L2*RB2*RM2*RT2 + C1*L1*L2*RB1*RM2*RT2
 + C1*C2*L1*R4*RB1*RB2*RM1*RT2 + C1*L1*L2*RB2*RM1*RT2 + C1*L1*L2*RB1*RM1*RT2
 + C1*L1*L2*RB2*RM2*RT1 + C1*L1*L2*RB1*RM2*RT1 + C1*L1*L2*RB2*RM1*RT1
 + C1*L1*L2*RB1*RM1*RT1;

var NOM_BRe = C1*C2*RB1*RB2*RM1*RM2*RT1*RT2 + C1*C2*R4*RB2*RM1*RM2*RT1*RT2
 + C1*C2*R4*RB1*RB2*RM2*RT1*RT2 + C2*L2*RB2*RM2*RT1*RT2 + C2*L2*RB1*RM2*RT1*RT2
 + C2*L2*RB2*RM1*RT1*RT2 + C2*L2*RB1*RM1*RT1*RT2 + C1*C2*R4*RB1*RB2*RM1*RM2*RT2
 + C1*L2*RB2*RM1*RM2*RT2 + C1*L2*RB1*RM1*RM2*RT2 + C1*L1*RB1*RB2*RM2*RT2
 + C2*L2*R4*RB2*RM2*RT2 + C1*L2*R4*RB2*RM2*RT2 + C1*L1*R4*RB2*RM2*RT2
 + C2*L2*R4*RB1*RM2*RT2 + C1*L2*R4*RB1*RM2*RT2 + C1*L1*RB1*RB2*RM1*RT2
 + C2*L2*R4*RB2*RM1*RT2 + C1*L1*R4*RB2*RM1*RT2 + C2*L2*R4*RB1*RM1*RT2
 + C1*L2*RB2*RM1*RM2*RT1 + C1*L2*RB1*RM1*RM2*RT1 + C1*L1*RB1*RB2*RM2*RT1
 + C1*L2*R4*RB2*RM2*RT1 + C1*L1*R4*RB2*RM2*RT1 + C1*L2*R4*RB1*RM2*RT1
 + C1*L1*RB1*RB2*RM1*RT1 + C1*L1*R4*RB2*RM1*RT1;

var NOM_CIm = C2*RB1*RB2*RM2*RT1*RT2 + C2*R4*RB2*RM2*RT1*RT2 + C2*RB1*RB2*RM1*RT1*RT2
 + C2*R4*RB2*RM1*RT1*RT2 + C1*RB1*RB2*RM1*RM2*RT2 + C1*R4*RB2*RM1*RM2*RT2
 + C2*R4*RB1*RB2*RM2*RT2 + C1*R4*RB1*RB2*RM2*RT2 + L2*RB2*RM2*RT2
 + L2*RB1*RM2*RT2 + C2*R4*RB1*RB2*RM1*RT2 + L2*RB2*RM1*RT2 + L2*RB1*RM1*RT2
 + C1*RB1*RB2*RM1*RM2*RT1 + C1*R4*RB2*RM1*RM2*RT1 + C1*R4*RB1*RB2*RM2*RT1
 + L2*RB2*RM2*RT1 + L2*RB1*RM2*RT1 + L2*RB2*RM1*RT1 + L2*RB1*RM1*RT1;

var NOM_DRe = RB1*RB2*RM2*RT2 + R4*RB2*RM2*RT2 + RB1*RB2*RM1*RT2 + R4*RB2*RM1*RT2
 + RB1*RB2*RM2*RT1 + R4*RB2*RM2*RT1 + RB1*RB2*RM1*RT1 + R4*RB2*RM1*RT1;


        // loop through the selected frequency points and do calculation
        for (j = 0; j < X.length; j++) {
            // w = 2*pi*f
            var w = 2*Math.PI*X[j];

            var XDEN_XRe =  w*w*w*w*DEN_XRe;
            var XDEN_AIm = -w*w*w*DEN_AIm;
            var XDEN_BRe = -w*w*DEN_BRe;
            var XDEN_CIm =  w*DEN_CIm;
            var XDEN_DRe =  DEN_DRe;

            var DENOMINATOR = ( (XDEN_XRe + XDEN_BRe + XDEN_DRe)*(XDEN_XRe + XDEN_BRe + XDEN_DRe) + (XDEN_AIm + XDEN_CIm)*(XDEN_AIm + XDEN_CIm) );

            var XNOM_I_XRe =  w*w*w*w*NOM_XRe;
            var XNOM_I_AIm = -w*w*w*NOM_AIm;
            var XNOM_I_BRe = -w*w*NOM_BRe;
            var XNOM_I_CIm =  w*NOM_CIm;
            var XNOM_I_DRe =  NOM_DRe;

            var NUMERATOR_Re = (XNOM_I_XRe + XNOM_I_BRe + XNOM_I_DRe)*(XDEN_XRe + XDEN_BRe + XDEN_DRe) + (XNOM_I_AIm + XNOM_I_CIm)*(XDEN_AIm + XDEN_CIm);
            var NUMERATOR_Im = (XDEN_XRe + XDEN_BRe + XDEN_DRe)*(XNOM_I_AIm + XNOM_I_CIm) - (XNOM_I_XRe + XNOM_I_BRe + XNOM_I_DRe)*(XDEN_AIm + XDEN_CIm);

            var cur = Math.sqrt(NUMERATOR_Re*NUMERATOR_Re + NUMERATOR_Im*NUMERATOR_Im)/DENOMINATOR;

            row = [];
            row.push(X[j]);
            row.push( 20*Math.log(R5*cur)/Math.log(10) );
            data.push(row);
        }

        if (!g) {
            g = createDyGraph(data, "Bench");
        } else {
            g.updateOptions({file: data});
        }
    }
</SCRIPT>
</FORM>
</BODY>
</HTML>