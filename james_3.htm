<!DOCTYPE html>
<HTML>
<HEAD>
<TITLE>TSC in the web</TITLE>
<LINK href="nouislider.css" rel="stylesheet"/>
<SCRIPT type="text/javascript" src="nouislider.min.js"></SCRIPT>
<LINK href="dygraph.css" rel="stylesheet"/>
<LINK href="tsc.css" rel="stylesheet"/>
<LINK href="https://fonts.googleapis.com/css?family=Barlow+Condensed|Raleway" rel="stylesheet">
<SCRIPT type="text/javascript" src="dygraph.min.js"></SCRIPT>
<SCRIPT type="text/javascript" src="tsc_common.js"></SCRIPT>
</HEAD>
<BODY>
<FORM name="frm" onsubmit="applyValues(); return false;">
  <TABLE class="tonestack-layout">
    <TR>
      <TD colspan="3" class="navbar">
        <DIV id="linkDiv" class="navbar-stack"></DIV>
        <DIV id="infoDiv" class="navbar-info"><a href="info.htm" class="navbar-menu-item">INFO</a></DIV>
      </TD>
    </TR>
    <TR>
      <TD class="tonestack-image">
        <IMG src="james_3_pic.png"></IMG>
        <A href="./circuit_analysis/james_3.pdf" target="_blank">Circuit Analysis</A>
      </TD>
      <TD class="tonestack-values">
        <table class="tonestack-values-table">
          <thead>
            <tr>
              <th class="tonestack-value-th-part">Part</th>
              <th class="tonestack-value-th-value">Value</th>
              <th class="tonestack-value-th-unit"></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="tonestack-value-label">RIN</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RIN" id="id_RIN" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">R1</td>
              <td class="tonestack-value-value"><INPUT type="text" name="R1" id="id_R1" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">R2</td>
              <td class="tonestack-value-value"><INPUT type="text" name="R2" id="id_R2" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">R3</td>
              <td class="tonestack-value-value"><INPUT type="text" name="R3" id="id_R3" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">RB</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RB" id="id_RB" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">RT</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RT" id="id_RT" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">RF</td>
              <td class="tonestack-value-value"><INPUT type="text" name="RF" id="id_RF" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">&Omega;</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">CB1</td>
              <td class="tonestack-value-value"><INPUT type="text" name="CB1" id="id_CB1" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">CB2</td>
              <td class="tonestack-value-value"><INPUT type="text" name="CB2" id="id_CB2" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">CT1</td>
              <td class="tonestack-value-value"><INPUT type="text" name="CT1" id="id_CT1" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
            <tr>
              <td class="tonestack-value-label">CT2</td>
              <td class="tonestack-value-value"><INPUT type="text" name="CT2" id="id_CT2" size="7" readonly="readonly" class="tonestack-value-input"></td>
              <td class="tonestack-value-unit">pF</td>
            </tr>
          </tbody>
        </table>
        <CENTER>
          <INPUT type="button" name="edit" value="Edit" title="Edit values" id="id_edit" onclick="editValues();" class="tonestack-values-button">
          <INPUT type="button" name="apply" value="Apply" title="Apply values" id="id_apply" onclick="applyValues();" class="tonestack-values-button">
          <INPUT type="button" name="defaults" value="Default" title="Set default values" id="id_defaults" onclick="setDefaultValues(); applyValues();" class="tonestack-values-button">
        </CENTER>
      </TD>
      <TD rowspan="2" class="tonestack-graph-panel">
        <div class="tonestack-bar">
          <div class="tonestack-graph-toggle">
            Amplitude<input type="checkbox" name="graphToggle" onclick="updateURL(); swapGraphs();" class="toggle">Phase
          </div>
          <input type="button" name="Clear" value="Clear snapshots" id="id_clear" onclick="clearSnapshots();" class="tonestack-values-button tonestack-graph-button">
          <input type="button" name="Snapshot" value="Take snapshot" id="id_snapshot" onclick="addSeries();" class="tonestack-values-button tonestack-graph-button">
          <input type="button" name="Sweep" value="Sweep" id="id_sweep" onclick="sweepValues();" class="tonestack-values-button tonestack-graph-button">
        </div>
        <div id="graphContainer" class="tonestack-graph-container">
          <div id="graph" class="tonestack-graph"></div>
          <div id="graph2" class="tonestack-graph hidden"></div>
          <div id="legendDiv" class="tonestack-graph-value"></div>
        </div>
      </TD>
    </TR>
    <TR>
      <TD colspan="2" class="tonestack-sliders">
        <BR>
        <SPAN id="label_RB" class="tonestack-slider-label">RB
          <select id="id_RB_pot" name="RB_pot" class="tonestack-select-pot" onchange="updateURL(); doCalc()">
            <option value="Linear" selected="selected">Linear</option>
            <option value="LogA">LogA</option>
            <option value="LogB">LogB</option>
          </select>
        </SPAN>
        <DIV id="range_RB" class="tonestack-slider-input"></DIV>
        <SPAN id="value_RB" class="tonestack-slider-value"></SPAN><BR><BR><BR><BR>
        <SPAN id="label_RT" class="tonestack-slider-label">RT
          <select id="id_RT_pot" name="RT_pot" class="tonestack-select-pot" onchange="updateURL(); doCalc()">
            <option value="Linear" selected="selected">Linear</option>
            <option value="LogA">LogA</option>
            <option value="LogB">LogB</option>
          </select>
        </SPAN>
        <DIV id="range_RT" class="tonestack-slider-input"></DIV>
        <SPAN id="value_RT" class="tonestack-slider-value"></SPAN><BR><BR><BR><BR>
      </TD>
    </TR>
  </TABLE>

<SCRIPT>
    // create links to all the tone stack pages to the top of the page
    createLinks("linkDiv", "James", "Active / Dual Bass Capacitor");

    // component variables for calculation
    var RTreble;
    var RBass;
    var RIN;
    var R1;
    var R2;
    var R3;
    var RF;
    var CB1;
    var CB2;
    var CT1;
    var CT2;

    // create sliders and save the div-element of the slider
    var range_RB = createSlider('range_RB','value_RB');
    var range_RT = createSlider('range_RT','value_RT');

    // data for frequency points is created here and saved to array X
    var X = createFrequencies(90,10,100000,1);

    // Graph objects
    var graph1 = new tscGraph(X, "frequency [Hz]", "amplitude [dB]", "James", 25);
    var graph2 = new tscGraph(X, "frequency [Hz]", "phase", "James", 0, "graph2");
    currentGraph = graph1;

    // Set default part values, plus any customizations
    setDefaultValues();
    setCustomValues();

    // Apply part values and display settings
    applyValues();
    if (document.frm.graphToggle.checked) {
        swapGraphs();
    }

    // start listening the onSlide event from the slider and run the analysis function
    range_RB.noUiSlider.on('slide', doCalc);
    range_RT.noUiSlider.on('slide', doCalc);

    // this function is called when the Apply-button is clicked
    function applyValues() {
        RIN     = parseInt(document.frm.RIN.value);
        R1      = parseInt(document.frm.R1.value);
        RBass   = parseInt(document.frm.RB.value);
        R2      = parseInt(document.frm.R2.value);
        R3      = parseInt(document.frm.R3.value);
        RTreble = parseInt(document.frm.RT.value);
        RF      = parseInt(document.frm.RF.value);
        CB1     = (1e-12)*parseInt(document.frm.CB1.value);
        CB2     = (1e-12)*parseInt(document.frm.CB2.value);
        CT1     = (1e-12)*parseInt(document.frm.CT1.value);
        CT2     = (1e-12)*parseInt(document.frm.CT2.value);

        // set the input fields to readonly mode with gray background
        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].setAttribute('readonly', 'readonly');
                inputElements[i].style.backgroundColor = "#EBEBE4";
            }
        }
        updateURL();
        doCalc();
    }


    // this function is called when the Edit-button is clicked
    function editValues() {
        var inputElements = document.forms["frm"].getElementsByTagName('input');
        for (var i in inputElements) {
            if (inputElements[i].type == "text") {
                inputElements[i].removeAttribute('readonly');
                inputElements[i].style.backgroundColor = "#FFFFFF";
            }
        }
    }


    // This function is called when the Set default values -button is clicked.
    // It sets the hard-coded values to the input fields and applies the values.
    function setDefaultValues() {
        document.frm.RIN.value = 600;
        document.frm.R1.value  = 2200;
        document.frm.R2.value  = 2200;
        document.frm.R3.value  = 2200;
        document.frm.RB.value  = 10000;
        document.frm.RT.value  = 10000;
        document.frm.RF.value  = 600;
        document.frm.CB1.value = 220000;
        document.frm.CB2.value = 220000;
        document.frm.CT1.value = 10000;
        document.frm.CT2.value = 10000;
        document.frm.RB_pot.value = "Linear";
        document.frm.RT_pot.value = "Linear";
    }


    // This function creates the sweep for extreme values
    // and produces data for testing the accuracy of the model
    function sweepValues() {
        for (p = 0; p <= 10; p += 5) {
            range_RB.noUiSlider.set(p);
            for (q = 0; q <=10; q += 5) {
                range_RT.noUiSlider.set(q);
                addSeries();
            }
        }
    }


    // This function is called with every change of the slider.
    // It does the hard math and evaluates the filter transfer function
    // for the given frequency range and updates values to the graph.
    function doCalc() {

        // pot rotation 0 - 10 from the slider component
        var RotTreble = getRotationForPotType(range_RT.noUiSlider.get(), document.frm.RT_pot.value);
        var RotBass   = getRotationForPotType(range_RB.noUiSlider.get(), document.frm.RB_pot.value);

        // Calculated part values
        var RB2  = Math.round( RBass*(1.0*RotBass/10.0) );
        var RB1  = Math.round( RBass*(1.0 - 1.0*RotBass/10.0) );
        var RT2  = Math.round( RTreble*(1.0*RotTreble/10.0) );
        var RT1  = Math.round( RTreble*(1.0 - 1.0*RotTreble/10.0) );


        // Transfer function denominator coefficients

        var DEN_XRe = (- CB1*CB2*CT1*CT2*RB1*RB2*RIN*RT1*RT2)
         - CB1*CB2*CT1*CT2*R1*RB1*RB2*RT1*RT2 - CB1*CB2*CT1*CT2*R3*RB1*RB2*RIN*RT2
         - CB1*CB2*CT1*CT2*R1*RB1*RB2*RIN*RT2 - CB1*CB2*CT1*CT2*R3*RB1*RB2*RIN*RT1
         - CB1*CB2*CT1*CT2*R2*RB1*RB2*RIN*RT1 - CB1*CB2*CT1*CT2*R2*R3*RB1*RB2*RT1
         - CB1*CB2*CT1*CT2*R1*R3*RB1*RB2*RT1 - CB1*CB2*CT1*CT2*R1*R2*RB1*RB2*RT1
         - CB1*CB2*CT1*CT2*R2*R3*RB1*RB2*RIN - CB1*CB2*CT1*CT2*R1*R3*RB1*RB2*RIN
         - CB1*CB2*CT1*CT2*R1*R2*RB1*RB2*RIN;

        var DEN_AIm = (- CB2*CT1*CT2*RB2*RIN*RT1*RT2) - CB1*CT1*CT2*RB1*RIN*RT1*RT2
         - CB2*CT1*CT2*RB1*RB2*RT1*RT2 - CB2*CT1*CT2*R1*RB2*RT1*RT2
         - CB1*CT1*CT2*R1*RB1*RT1*RT2 - CB2*CT1*CT2*RB1*RB2*RIN*RT2
         - CB1*CB2*CT2*RB1*RB2*RIN*RT2 - CB2*CT1*CT2*R3*RB2*RIN*RT2
         - CB2*CT1*CT2*R1*RB2*RIN*RT2 - CB1*CT1*CT2*R3*RB1*RIN*RT2
         - CB1*CT1*CT2*R1*RB1*RIN*RT2 - CB1*CB2*CT2*R1*RB1*RB2*RT2
         - CB1*CT1*CT2*RB1*RB2*RIN*RT1 - CB1*CB2*CT1*RB1*RB2*RIN*RT1
         - CB2*CT1*CT2*R3*RB2*RIN*RT1 - CB2*CT1*CT2*R2*RB2*RIN*RT1
         - CB1*CT1*CT2*R3*RB1*RIN*RT1 - CB1*CT1*CT2*R2*RB1*RIN*RT1
         - CB2*CT1*CT2*R3*RB1*RB2*RT1 - CB1*CT1*CT2*R3*RB1*RB2*RT1
         - CB2*CT1*CT2*R2*RB1*RB2*RT1 - CB1*CT1*CT2*R1*RB1*RB2*RT1
         - CB1*CB2*CT1*R1*RB1*RB2*RT1 - CB2*CT1*CT2*R2*R3*RB2*RT1
         - CB2*CT1*CT2*R1*R3*RB2*RT1 - CB2*CT1*CT2*R1*R2*RB2*RT1
         - CB1*CT1*CT2*R2*R3*RB1*RT1 - CB1*CT1*CT2*R1*R3*RB1*RT1
         - CB1*CT1*CT2*R1*R2*RB1*RT1 - CB2*CT1*CT2*R3*RB1*RB2*RIN
         - CB1*CT1*CT2*R3*RB1*RB2*RIN - CB1*CB2*CT2*R3*RB1*RB2*RIN
         - CB1*CB2*CT1*R3*RB1*RB2*RIN - CB2*CT1*CT2*R2*RB1*RB2*RIN
         - CB1*CB2*CT2*R2*RB1*RB2*RIN - CB1*CT1*CT2*R1*RB1*RB2*RIN
         - CB1*CB2*CT1*R1*RB1*RB2*RIN - CB2*CT1*CT2*R2*R3*RB2*RIN
         - CB2*CT1*CT2*R1*R3*RB2*RIN - CB2*CT1*CT2*R1*R2*RB2*RIN
         - CB1*CT1*CT2*R2*R3*RB1*RIN - CB1*CT1*CT2*R1*R3*RB1*RIN
         - CB1*CT1*CT2*R1*R2*RB1*RIN - CB1*CB2*CT2*R2*R3*RB1*RB2
         - CB1*CB2*CT2*R1*R3*RB1*RB2 - CB1*CB2*CT2*R1*R2*RB1*RB2;

        var DEN_BRe = (- CT1*CT2*RIN*RT1*RT2) - CT1*CT2*RB1*RT1*RT2 - CT1*CT2*R1*RT1*RT2
         - CB2*CT2*RB2*RIN*RT2 - CT1*CT2*RB1*RIN*RT2 - CB1*CT2*RB1*RIN*RT2
         - CT1*CT2*R3*RIN*RT2 - CT1*CT2*R1*RIN*RT2 - CB2*CT2*RB1*RB2*RT2
         - CB2*CT2*R1*RB2*RT2 - CB1*CT2*R1*RB1*RT2 - CT1*CT2*RB2*RIN*RT1
         - CB2*CT1*RB2*RIN*RT1 - CB1*CT1*RB1*RIN*RT1 - CT1*CT2*R3*RIN*RT1
         - CT1*CT2*R2*RIN*RT1 - CT1*CT2*RB1*RB2*RT1 - CB2*CT1*RB1*RB2*RT1
         - CT1*CT2*R3*RB2*RT1 - CT1*CT2*R1*RB2*RT1 - CB2*CT1*R1*RB2*RT1
         - CT1*CT2*R3*RB1*RT1 - CT1*CT2*R2*RB1*RT1 - CB1*CT1*R1*RB1*RT1
         - CT1*CT2*R2*R3*RT1 - CT1*CT2*R1*R3*RT1 - CT1*CT2*R1*R2*RT1
         - CT1*CT2*RB1*RB2*RIN - CB1*CT2*RB1*RB2*RIN - CB2*CT1*RB1*RB2*RIN
         - CB1*CB2*RB1*RB2*RIN - CT1*CT2*R3*RB2*RIN - CB2*CT2*R3*RB2*RIN
         - CB2*CT1*R3*RB2*RIN - CB2*CT2*R2*RB2*RIN - CT1*CT2*R1*RB2*RIN
         - CB2*CT1*R1*RB2*RIN - CT1*CT2*R3*RB1*RIN - CB1*CT2*R3*RB1*RIN
         - CB1*CT1*R3*RB1*RIN - CT1*CT2*R2*RB1*RIN - CB1*CT2*R2*RB1*RIN
         - CB1*CT1*R1*RB1*RIN - CT1*CT2*R2*R3*RIN - CT1*CT2*R1*R3*RIN
         - CT1*CT2*R1*R2*RIN - CB2*CT2*R3*RB1*RB2 - CB1*CT2*R3*RB1*RB2
         - CB2*CT2*R2*RB1*RB2 - CB1*CT2*R1*RB1*RB2 - CB1*CB2*R1*RB1*RB2
         - CB2*CT2*R2*R3*RB2 - CB2*CT2*R1*R3*RB2 - CB2*CT2*R1*R2*RB2
         - CB1*CT2*R2*R3*RB1 - CB1*CT2*R1*R3*RB1 - CB1*CT2*R1*R2*RB1;

        var DEN_CIm = (- CT2*RIN*RT2) - CT2*RB1*RT2 - CT2*R1*RT2 - CT1*RIN*RT1 - CT1*RB1*RT1
         - CT1*R1*RT1 - CT2*RB2*RIN - CB2*RB2*RIN - CT1*RB1*RIN - CB1*RB1*RIN
         - CT2*R3*RIN - CT1*R3*RIN - CT2*R2*RIN - CT1*R1*RIN - CT2*RB1*RB2
         - CB2*RB1*RB2 - CT2*R3*RB2 - CT2*R1*RB2 - CB2*R1*RB2 - CT2*R3*RB1 - CT2*R2*RB1
         - CB1*R1*RB1 - CT2*R2*R3 - CT2*R1*R3 - CT2*R1*R2;

        var DEN_DRe = (- RIN) - RB1 - R1;


        // Transfer function numerator coefficients

        var NOM_XRe = CB1*CB2*CT1*CT2*RB1*RB2*RF*RT1*RT2 + CB1*CB2*CT1*CT2*R2*RB1*RB2*RT1*RT2
         + CB1*CB2*CT1*CT2*R3*RB1*RB2*RF*RT2 + CB1*CB2*CT1*CT2*R1*RB1*RB2*RF*RT2
         + CB1*CB2*CT1*CT2*R2*R3*RB1*RB2*RT2 + CB1*CB2*CT1*CT2*R1*R3*RB1*RB2*RT2
         + CB1*CB2*CT1*CT2*R1*R2*RB1*RB2*RT2 + CB1*CB2*CT1*CT2*R3*RB1*RB2*RF*RT1
         + CB1*CB2*CT1*CT2*R2*RB1*RB2*RF*RT1 + CB1*CB2*CT1*CT2*R2*R3*RB1*RB2*RF
         + CB1*CB2*CT1*CT2*R1*R3*RB1*RB2*RF + CB1*CB2*CT1*CT2*R1*R2*RB1*RB2*RF;

        var NOM_AIm = CB2*CT1*CT2*RB2*RF*RT1*RT2 + CB1*CT1*CT2*RB1*RF*RT1*RT2
         + CB1*CT1*CT2*RB1*RB2*RT1*RT2 + CB2*CT1*CT2*R2*RB2*RT1*RT2
         + CB1*CT1*CT2*R2*RB1*RT1*RT2 + CB2*CT1*CT2*RB1*RB2*RF*RT2
         + CB1*CB2*CT2*RB1*RB2*RF*RT2 + CB2*CT1*CT2*R3*RB2*RF*RT2
         + CB2*CT1*CT2*R1*RB2*RF*RT2 + CB1*CT1*CT2*R3*RB1*RF*RT2
         + CB1*CT1*CT2*R1*RB1*RF*RT2 + CB2*CT1*CT2*R3*RB1*RB2*RT2
         + CB1*CT1*CT2*R3*RB1*RB2*RT2 + CB2*CT1*CT2*R2*RB1*RB2*RT2
         + CB1*CB2*CT2*R2*RB1*RB2*RT2 + CB1*CT1*CT2*R1*RB1*RB2*RT2
         + CB2*CT1*CT2*R2*R3*RB2*RT2 + CB2*CT1*CT2*R1*R3*RB2*RT2
         + CB2*CT1*CT2*R1*R2*RB2*RT2 + CB1*CT1*CT2*R2*R3*RB1*RT2
         + CB1*CT1*CT2*R1*R3*RB1*RT2 + CB1*CT1*CT2*R1*R2*RB1*RT2
         + CB1*CT1*CT2*RB1*RB2*RF*RT1 + CB1*CB2*CT1*RB1*RB2*RF*RT1
         + CB2*CT1*CT2*R3*RB2*RF*RT1 + CB2*CT1*CT2*R2*RB2*RF*RT1
         + CB1*CT1*CT2*R3*RB1*RF*RT1 + CB1*CT1*CT2*R2*RB1*RF*RT1
         + CB1*CB2*CT1*R2*RB1*RB2*RT1 + CB2*CT1*CT2*R3*RB1*RB2*RF
         + CB1*CT1*CT2*R3*RB1*RB2*RF + CB1*CB2*CT2*R3*RB1*RB2*RF
         + CB1*CB2*CT1*R3*RB1*RB2*RF + CB2*CT1*CT2*R2*RB1*RB2*RF
         + CB1*CB2*CT2*R2*RB1*RB2*RF + CB1*CT1*CT2*R1*RB1*RB2*RF
         + CB1*CB2*CT1*R1*RB1*RB2*RF + CB2*CT1*CT2*R2*R3*RB2*RF
         + CB2*CT1*CT2*R1*R3*RB2*RF + CB2*CT1*CT2*R1*R2*RB2*RF
         + CB1*CT1*CT2*R2*R3*RB1*RF + CB1*CT1*CT2*R1*R3*RB1*RF
         + CB1*CT1*CT2*R1*R2*RB1*RF + CB1*CB2*CT1*R2*R3*RB1*RB2
         + CB1*CB2*CT1*R1*R3*RB1*RB2 + CB1*CB2*CT1*R1*R2*RB1*RB2;

        var NOM_BRe = CT1*CT2*RF*RT1*RT2 + CT1*CT2*RB2*RT1*RT2 + CT1*CT2*R2*RT1*RT2
         + CB2*CT2*RB2*RF*RT2 + CT1*CT2*RB1*RF*RT2 + CB1*CT2*RB1*RF*RT2
         + CT1*CT2*R3*RF*RT2 + CT1*CT2*R1*RF*RT2 + CT1*CT2*RB1*RB2*RT2
         + CB1*CT2*RB1*RB2*RT2 + CT1*CT2*R3*RB2*RT2 + CB2*CT2*R2*RB2*RT2
         + CT1*CT2*R1*RB2*RT2 + CT1*CT2*R3*RB1*RT2 + CT1*CT2*R2*RB1*RT2
         + CB1*CT2*R2*RB1*RT2 + CT1*CT2*R2*R3*RT2 + CT1*CT2*R1*R3*RT2
         + CT1*CT2*R1*R2*RT2 + CT1*CT2*RB2*RF*RT1 + CB2*CT1*RB2*RF*RT1
         + CB1*CT1*RB1*RF*RT1 + CT1*CT2*R3*RF*RT1 + CT1*CT2*R2*RF*RT1
         + CB1*CT1*RB1*RB2*RT1 + CB2*CT1*R2*RB2*RT1 + CB1*CT1*R2*RB1*RT1
         + CT1*CT2*RB1*RB2*RF + CB1*CT2*RB1*RB2*RF + CB2*CT1*RB1*RB2*RF
         + CB1*CB2*RB1*RB2*RF + CT1*CT2*R3*RB2*RF + CB2*CT2*R3*RB2*RF
         + CB2*CT1*R3*RB2*RF + CB2*CT2*R2*RB2*RF + CT1*CT2*R1*RB2*RF
         + CB2*CT1*R1*RB2*RF + CT1*CT2*R3*RB1*RF + CB1*CT2*R3*RB1*RF
         + CB1*CT1*R3*RB1*RF + CT1*CT2*R2*RB1*RF + CB1*CT2*R2*RB1*RF
         + CB1*CT1*R1*RB1*RF + CT1*CT2*R2*R3*RF + CT1*CT2*R1*R3*RF + CT1*CT2*R1*R2*RF
         + CB2*CT1*R3*RB1*RB2 + CB1*CT1*R3*RB1*RB2 + CB2*CT1*R2*RB1*RB2
         + CB1*CB2*R2*RB1*RB2 + CB1*CT1*R1*RB1*RB2 + CB2*CT1*R2*R3*RB2
         + CB2*CT1*R1*R3*RB2 + CB2*CT1*R1*R2*RB2 + CB1*CT1*R2*R3*RB1
         + CB1*CT1*R1*R3*RB1 + CB1*CT1*R1*R2*RB1;

        var NOM_CIm = CT2*RF*RT2 + CT2*RB2*RT2 + CT2*R2*RT2 + CT1*RF*RT1 + CT1*RB2*RT1
         + CT1*R2*RT1 + CT2*RB2*RF + CB2*RB2*RF + CT1*RB1*RF + CB1*RB1*RF + CT2*R3*RF
         + CT1*R3*RF + CT2*R2*RF + CT1*R1*RF + CT1*RB1*RB2 + CB1*RB1*RB2 + CT1*R3*RB2
         + CB2*R2*RB2 + CT1*R1*RB2 + CT1*R3*RB1 + CT1*R2*RB1 + CB1*R2*RB1 + CT1*R2*R3
         + CT1*R1*R3 + CT1*R1*R2;

        var NOM_DRe = RF + RB2 + R2;


        // Calculate magnitude and phase at each frequency
        doCalcBode(
            [ NOM_DRe, NOM_CIm, NOM_BRe, NOM_AIm, NOM_XRe ],
            [ DEN_DRe, DEN_CIm, DEN_BRe, DEN_AIm, DEN_XRe ]
        );
        currentGraph.update();
    }
</SCRIPT>
</FORM>
</BODY>
</HTML>
